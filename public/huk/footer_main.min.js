document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('s-expansion-panel').forEach(function (aufklapper) {

        aufklapper.addEventListener('sCloseExpansionPanel', (e) => {
            var label = getLabel(e);
            trackAkkordion(label, "close");
        });

        aufklapper.addEventListener('sOpenExpansionPanel', (e) => {
            var label = getLabel(e);
            trackAkkordion(label, "open");
        });
    });

    function getLabel(e) {
        return e.target.closest('[slot="headline"]')?.innerText || e.target.querySelector("[slot='headline']")?.innerText || "label not found";
    }

    function trackAkkordion(label, value) {
        if (typeof _satellite !== 'undefined' && _satellite !== null
            && typeof _satellite.track !== 'undefined' && _satellite.track !== null) {
            _satellite.track('Event', {
                eventAction: "Akkordion",
                eventLabel: label,
                eventValue: value,
                elementName: "s-expansion-panel",
                eventSource: "shield"
            });
        }
    }
});
document.addEventListener('DOMContentLoaded', () => {

  function closeAllAufklapper(personalprofile) {
    personalprofile.forEach((personalprofil) => {
      const iconButton = personalprofil.querySelector('.iconbutton');
      const aufklapperElement = personalprofil.nextElementSibling;
      const card = personalprofil.querySelector(".c_personalprofil__card");
      iconButton.setAttribute('variant', 'subdued');
      iconButton.setAttribute('icon', 'chevron-bottom');
      card.classList.remove('active');
      aufklapperElement.classList.add("s:d-hidden");
    });
  }

  const personalContainers = document.querySelectorAll('.c_personalcontainer');

  // durchlaufe alle Personal-Container auf der Seite
  personalContainers.forEach(function (container) {
    const personalprofile = container.querySelectorAll('.c_personalprofil');

    // durchlaufe alle Personalprofile in diesem Container (und damit auch die jeweils zugehörigen Aufklapper)
    personalprofile.forEach((personalprofil, index) => {
      const card = personalprofil.querySelector(".c_personalprofil__card");

      // definiere die Reihenfolde der Items in 2er-Schritten (das lässt Platz für den Aufklapper)
      const indexMal2 = (index + 1) * 2;
      personalprofil.style.setProperty('--order', indexMal2.toString());

      // Sortiere den Aufklapper an die passende Position ein: Er steht nach dem letzten Element der aktuellen Zeile und vor dem ersten Element der nächsten Zeile.
      const itemsPerRowDesktop = (Number)(container.dataset.itemsPerRow);
      const itemsPerRowMobile = 2;
      const positionOfAusklapperDesktop = 2 * itemsPerRowDesktop * Math.ceil((index + 1) / itemsPerRowDesktop) + 1;
      const positionOfAusklapperMobile = 2 * itemsPerRowMobile * Math.ceil((index + 1) / itemsPerRowMobile) + 1;

      const aufklapperElement = personalprofil.nextElementSibling;
      aufklapperElement.style.setProperty("--order", positionOfAusklapperMobile.toString());
      aufklapperElement.style.setProperty("--order-lg", positionOfAusklapperDesktop.toString());

      // definiere  ein Click-Event auf den Iconbutton, das den Aufklapper öffnet und schließt
      var iconButton= personalprofil.querySelector('.iconbutton');
      iconButton.addEventListener('click', () => {
        const isOpen = iconButton.getAttribute('variant') === 'filled';

        // zunächst vorsorglich alle Aufklapper schließen
        closeAllAufklapper(personalprofile);

        if (!isOpen) {
          iconButton.setAttribute('variant', 'filled');
          iconButton.setAttribute('icon', 'chevron-top');
          card.classList.add('active');
          aufklapperElement.classList.remove('s:d-hidden');
        }
      });

      // definiere  ein Click-Event auf den Schließen-Button im Aufklapper
      var closeButton= aufklapperElement.querySelector('.iconbutton');
      closeButton.addEventListener('click', () => {
        closeAllAufklapper(personalprofile);
      });

      // wenn gefordert ersten Aufklapper gleich öffnen
      if (index === 0 && container.hasAttribute("data-first-item-open")) {
        iconButton.click();
      }
    });
  });
});

// Avoid `console` errors in browsers that lack a console.
(function () {
	var method;
	var noop = function () { /* must be empty */ };
	var methods = [
		'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
		'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
		'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
		'timeStamp', 'trace', 'warn'
	];
	var length = methods.length;
	var console = (window.console = window.console || {});

	while (length--) {
		method = methods[length];

		// Only stub undefined methods.
		if (!console[method]) {
			console[method] = noop;
		}
	}
}());


// todo - cache in global huk object
var $w = $(window), $html = $('html'), $scrollEls = $('html, body');

var huk;
if (!huk) {
	huk = {};
}

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	utils: {
		touchDevice: false,
		productionEnv: false,
		init: function () {
			// bind keyup events
			$(window).on('keyup', function (e) {
				// ESC
				if (e.keyCode === 27) {
					$(window).trigger('esc-key');
				}

			});

			// remove nojs class
			document.querySelector('html').classList.remove('no-js');
			// set env
			huk.utils.productionEnv = huk.utils.getProductionEnv();

			// add touch device classes
			huk.utils.touchDevice = huk.utils.isTouchDevice();
			if (huk.utils.touchDevice) {
				document.querySelector('html').classList.remove('no-touchevents');
				document.querySelector('html').classList.add('touchevents');
			}

		},
		getProductionEnv: function () {
			return window.location.host === 'www.huk.de';
		},
		isTouchDevice: function () {
			var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');
			var mq = function (query) {
				return window.matchMedia(query).matches;
			};

			if (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {
				return true;
			}

			// include the 'heartz' as a way to have a non matching MQ to help terminate the join
			// https://git.io/vznFH
			var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');
			return mq(query);
		},
		throttle: function (fn, threshhold, scope) {
			var delay = 250, last, deferTimer;
			if (threshhold) delay = threshhold;
			return function () {
				var context = scope || this;
				var now = +new Date(),
					args = arguments;
				if (last && now < last + delay) {
					clearTimeout(deferTimer);
					deferTimer = setTimeout(function () {
						last = now;
						fn.apply(context, args);
					}, delay);
				} else {
					last = now;
					fn.apply(context, args);
				}
			};
		},
		getUrlParameter: function (sParam) {
			var sPageURL = decodeURIComponent(window.location.search.substring(1)),
				sURLVariables = sPageURL.split('&'),
				sParameterName;

			for (var i = 0; i < sURLVariables.length; i++) {
				sParameterName = sURLVariables[i].split('=');

				if (sParameterName[0] === sParam) {
					return sParameterName[1] === undefined ? true : sParameterName[1];
				}
			}
		},
		url: {
			hasQueryString: function () {
				return huk.utils.url.getQueryString().length > 0;
			},
			hasValidQueryString: function () {
				// return huk.utils.url.getQueryString().length > 0;
			},
			getQueryString: function () {
				var url = window.location.href;
				// get query string from url (optional) or window
				return url ? url.split('?')[1] : window.location.search.slice(1);
			}
		},
		// TODO ueberpruefen ob noch benoetigt
		getCookie: function (cname) {
			try {
				var name = cname + '=';
				var ca = document.cookie.split(';');
				for (var i = 0; i < ca.length; i++) {
					var c = ca[i];
					while (c.charAt(0) == ' ') {
						c = c.substring(1);
					}
					if (c.indexOf(name) == 0) {
						return c.substring(name.length, c.length);
					}
				}
				return '';
			} catch (e) {
				return '';
			}
		},
		getAllUrlParams: function () {
			// get query string from url (optional) or window
			var queryString = huk.utils.url.getQueryString();

			// we'll store the parameters here
			var obj = {};

			// if query string exists
			if (queryString) {

				// stuff after # is not part of query string, so get rid of it
				queryString = queryString.split('#')[0];

				// split our query string into its component parts
				var arr = queryString.split('&');

				for (var i = 0; i < arr.length; i++) {
					// separate the keys and the values
					var a = arr[i].split('=');

					// in case params look like: list[]=thing1&list[]=thing2
					var paramNum = undefined;
					var paramName = a[0].replace(/\[\d*\]/, function (v) {
						paramNum = v.slice(1, -1);
						return '';
					});

					// set parameter value (use 'true' if empty)
					var paramValue = typeof (a[1]) === 'undefined' ? true : a[1];


					paramName = decodeURIComponent(paramName);
					paramValue = decodeURIComponent(paramValue);

					// if parameter name already exists
					if (obj[paramName]) {
						// convert value to array (if still string)
						if (typeof obj[paramName] === 'string') {
							obj[paramName] = [obj[paramName]];
						}
						// if no array index number specified...
						if (typeof paramNum === 'undefined') {
							// put the value on the end of the array
							obj[paramName].push(paramValue);
						}
						// if array index number specified...
						else {
							// put the value at that index number

							obj[paramName][paramNum] = paramValue;
						}
					}
					// if param name doesn't exist yet, set it
					else {
						obj[paramName] = [];
						obj[paramName].push(paramValue);
					}
				}
			}

			return obj;
		},
		getJsPath: function () {
			return window.location.origin + '/etc/designs/hukde/js/';
		},
		escapeForEmail: function (str) {
			return String(str).replace(/&/g, '%26');
		},
		isInViewport: function (classSelector) {
			var trackedElement = document.getElementsByClassName(classSelector)[0],
				inViewport = false,
				elementRect = null;

			if (trackedElement) {
				elementRect = trackedElement.getBoundingClientRect();
				inViewport = (
					elementRect.top >= 0 &&
					elementRect.left >= 0 &&
					elementRect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
					elementRect.right <= (window.innerWidth || document.documentElement.clientWidth)
				);
			}
			return inViewport;
		}
	}
});
$(huk.utils.init);


var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	cookiesettings: {
		state: {
			functional: huk.utils.getCookie('consent_functional') !== 'DENY',
			marketing: huk.utils.getCookie('consent_marketing') === 'ALLOW',
			technical: true
		},
		init: function () {
			huk.cookiesettings.bindEvents();
		},
		bindEvents: function () {
			// after consent was changed
			window.addEventListener("consentChanged", function (event) {
				huk.cookiesettings.updateObject(event.detail);
			});
		},
		// in use since July 2020
		hasConsentFunctional: function () {
			return huk.cookiesettings.state.functional;
		},
		hasConsentMarketing: function () {
			return huk.cookiesettings.state.marketing;
		},
		updateObject: function (stateObj) {
			huk.cookiesettings.state = stateObj;
		}
	}
});
$(huk.cookiesettings.init);

const featureToggleItems = document.querySelectorAll('.featureToggle__input');

featureToggleItems.forEach((item) => {
	const featureToggleName = item.id;

	if(getCookie(featureToggleName)) {
		item.checked = true;
	}

	item.addEventListener('change', function(e) {

		if(e.target.checked) {
			setCookie(featureToggleName, '1', 1/3);
		} else {
			eraseCookie(featureToggleName);
		}

		document.querySelector('.featureToggle__info').classList.remove('featureToggle__info--hidden');
	})
})

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	device: {},
	viewport: {
		breakpoint: 'S',
		breakpointBefore: 'S',
		pageYOffset: 0,
		scrollbarWidth: 0,
		body: $('body'),
		html: $('html'),
		originalBodyPad: 0,
		bodyIsOverflowing: null,
		fixed: false,
		paddingElementsLarge: $('#site-header, #navigator, .stripe--stepnav'),
		paddingElements: $('body, .bottom-bar__inner'),
		init: function () {
			huk.viewport.resize();
			huk.viewport.defineBreakpoint();
			huk.viewport.defineOrientation();
			huk.viewport.checkScrollbar();
			$(window).on('orientationchange', huk.viewport.checkFixed());
			huk.device.devicePixelRatio = window.devicePixelRatio;
			huk.device.retina = huk.device.devicePixelRatio > 1 ? '-at2x' : '';
		},
		isDesktop: function () {
			return huk.viewport.breakpoint === 'L';
		},
		fix: function () {
			if (!huk.viewport.fixed) {
				huk.viewport.body
					.css('top', '-' + window.pageYOffset + 'px')
					.data('height', window.pageYOffset);
				huk.viewport.html.addClass('html--fixed');
				huk.viewport.body.addClass('body--fixed');
				huk.viewport.addPaddingForFixedBody();
				huk.viewport.fixed = true;
			}

		},
		unfix: function () {
			huk.viewport.triggerEvent('HukUnfixViewportBefore');
			huk.viewport.body.removeClass('body--fixed');
			huk.viewport.html.removeClass('html--fixed').removeAttr('style');
			huk.viewport.body.css('top', '');
			if(!huk.stickyHeader.balken.menu_open) {
				$(window).scrollTop($('body').data('height'));
			}
			huk.viewport.removePaddingForFixedBody();
			huk.viewport.fixed = false;
			huk.viewport.triggerEvent('HukUnfixViewportAfter');
		},
		triggerEvent: function(name){
			var isSupported = (function() {
				try {
					new CustomEvent('test');
					return true;
				} catch (e) {
					return false;
				}
			})();
			if (isSupported) {
				var event = new CustomEvent(name, {detail: {some: 'data'}});
			} else {
				var event = document.createEvent('CustomEvent');
				event.initCustomEvent(name, true, true, {some: 'data'});
			}
			document.dispatchEvent(event);
		},
		checkFixed: function () {
			if (huk.viewport.fixed) {
				huk.viewport.fix();
			}
		},
		defineBreakpoint: function () {
			if (window.matchMedia('(min-width: 320px)').matches) {
				huk.viewport.breakpoint = 'S';
			}
			if (window.matchMedia('(min-width: 600px)').matches) {
				huk.viewport.breakpoint = 'M';
			}
			if (window.matchMedia('(min-width: 1008px)').matches) {
				huk.viewport.breakpoint = 'L';
			}
		},
		definePageYOffset: function () {
			huk.viewport.pageYOffset = window.pageYOffset;
		},
		defineOrientation: function () {
			if (window.innerHeight > window.innerWidth) {
				huk.viewport.orientation = 'pm';
			} else {
				huk.viewport.orientation = 'lm';
			}
		},
		resize: function () {
			var doit;
			$w.on('resize', function () {
				clearTimeout(doit);
				doit = setTimeout(huk.viewport.resizeEnd, 100);
			});
		},
		resizeEnd: function () {
			// todo: in einzelmodule auslagern per custom events
			huk.viewport.defineBreakpoint();
			$w.trigger('resize-end');

			// trigger breakpointChanged event
			if (huk.viewport.breakpoint !== huk.viewport.breakpointBefore) $(window).trigger('breakpoint-change');
			huk.viewport.breakpointBefore = huk.viewport.breakpoint;

			huk.viewport.checkFixed();

			huk.buhne.setImageAsBackground();
		},
		checkScrollbar: function () {
			var fullWindowWidth = window.innerWidth;
			if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
				var documentElementRect = document.documentElement.getBoundingClientRect();
				fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
			}
			huk.viewport.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
			huk.viewport.scrollbarWidth = huk.viewport.measureScrollbar();
		},
		measureScrollbar: function () { // thx walsh
			var scrollDiv = document.createElement('div');
			scrollDiv.className = 'viewport-scrollbar-measure';
			huk.viewport.body.append(scrollDiv);
			var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
			huk.viewport.body[0].removeChild(scrollDiv);
			return scrollbarWidth;
		},
		getPaddingElements: function () {
			var els = {
				'small': $('body, .bottom-bar__inner'),
				'large': $('#site-header, .navigator--fixed, .stripe--sticky')
			};
			return els;
		},
		addPaddingForFixedBody: function () {
			if (huk.viewport.bodyIsOverflowing) {
				var els = huk.viewport.getPaddingElements();

				els.large.each(function () {
					$(this).data('oldpadding', $(this).css('padding-right')).css('padding-right', huk.viewport.scrollbarWidth + 10);
				});
				els.small.css('padding-right', huk.viewport.scrollbarWidth);
			}
		},
		removePaddingForFixedBody: function () {
			var els = huk.viewport.getPaddingElements();
			els.large.each(function () {
				$(this).css('padding-right', $(this).data('oldpadding'));
			});
			els.small.css('padding-right', '');
		}
	}
});
$(huk.viewport.init);

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	overlay: {
		element: null,
		init: function () {
			$('<div></div>', {
				'id' : 'overlay',
				'class' : 'overlay'
			}).appendTo('body');
			huk.overlay.element = document.getElementById('overlay');
		},
		show: function () {
			huk.overlay.element.classList.add('overlay--active');
		},
		hide: function () {
			huk.overlay.element.classList.remove('overlay--active');
		}
	}
});
$(huk.overlay.init);

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	navigation: {
		flyoutsContainer: $('#js-mainnav-flyouts'),
		flyoutsClose: $('.flyouts__close'),
		flyout_open: false,
		navElement: $('.navigation'),
		menu_open: false,
		init: function () {
			huk.navigation.clone();
			huk.navigation.setEvents();

		},

		setEvents: function () {

			// mobile stuff
			$('.hamburger').on('click', function () {
				huk.navigation.hamburgerClick($(this));
			});

			// scroll to nav item while in mobile menu
			$('.navigation__item, .navigation__headline, .navigation__link').on('click', function () {
				if (!huk.viewport.isDesktop()) {
					var el = $(this);
					setTimeout(function () {
						huk.navigation.navElement.animate({
							scrollTop: '+=' + (el.offset().top - huk.navigation.navElement.offset().top)
						}, 700);
					}, 20);
				}
			});

			//click auf navigation item MOBILE
			$('.navigation__headline').on('click', function (e) {
				if (!huk.viewport.isDesktop()) {

					var element = $(this);
					// prevent link behavior for topic links
					if (element.hasClass('navigation__headline--level2')) {
						e.preventDefault();
					}

					element.toggleClass('js--active');
					var hasJsClass = element.hasClass('js--active');
					huk.navigation.toggleNavLevel2(element, hasJsClass);
				}
			});


			// click auf desktop navigation item
			$('header .navigation__item').not('a.navigation__item').on('click', function () {
				if ($('.flyout').is(':animated')) {
					return false;
				}

				if (huk.viewport.isDesktop()) {
					huk.navigation.mainnavClickDesktop($(this));
				} else {
					huk.navigation.mainnavClick($(this));
				}
				if (huk.navigation.menu_open) {
					huk.navigation.flyoutsClose.fadeIn();
				} else {
					huk.navigation.flyoutsClose.fadeOut();
				}
			});

			// CLOSE EVENTS

			$('.flyouts__close, #overlay').on('click', function () {
				if (huk.navigation.flyout_open || huk.navigation.menu_open) {
					huk.navigation.close();
				}
			});
			// close on ESC-Keypress
			$(window).on('esc-key', function () {
				if (huk.navigation.flyout_open || huk.navigation.menu_open) {
					huk.navigation.close();
				}
			});
			// close on breakpoint change
			$w.on('breakpoint-change', function () {
				if (huk.navigation.menu_open) {
					// wechsel klein zu "L"
					if (huk.viewport.breakpointBefore !== 'L' && huk.viewport.isDesktop()) {
						huk.navigation.close();
					}
					// wechsel "L" zu klein
					if (huk.viewport.breakpointBefore === 'L' && !huk.viewport.isDesktop()) {
						huk.navigation.close();
					}
				}
			});
		},
		mainnavClick: function (t) {
			var flyout = t.siblings('.flyout');
			huk.viewport.definePageYOffset();
			if (!huk.navigation.flyout_open) {
				$('header .navigation').css('max-height', ($(window).height() - $('.navigation').offset().top) + 'px'); // set maxheight programatically
				$('header .flyout').css('max-height', '');
				flyout.addClass('js-flyout--active').stop().slideDown();

				huk.navigation.flyout_open = true;
				huk.overlay.show();
				huk.viewport.fix();
			} else {
				//close flyout because click on active
				if (flyout.hasClass('js-flyout--active')) {
					flyout.removeClass('js-flyout--active').stop().slideUp();
					huk.navigation.flyoutsClose.hide();
					$('.navigation__list--level1').removeClass('active');
					huk.navigation.flyoutsContainer.find('.flyout').removeClass('js-flyout--active').hide();
				} else {
					//click on inactive button
					$('.flyout').removeClass('js-flyout--active').stop().slideUp();
					flyout.addClass('js-flyout--active').stop().slideDown();
					$('.navigation__list--level1').removeClass('active');
					flyout.closest('.navigation__list-item').addClass('active');
				}
			}
		},
		mainnavClickDesktop: function (clickedEl) {
			var el = clickedEl.attr('id'),
				$clickedFlyout = huk.navigation.flyoutsContainer.find('.' + el);

			$('.navigation__list-item').removeClass('active');
			clickedEl.parents('.navigation__list-item').addClass('active');

			//flyout is closed - open specific flyout
			if (!huk.navigation.flyout_open) {
				huk.viewport.checkScrollbar();

				huk.navigation.flyoutsContainer.find('.flyout').css('max-height', ($(window).height() - $('.head').height()) + 'px'); // set maxheight programatically
				$('.navigation').css('max-height', '');
				huk.viewport.definePageYOffset();

				$clickedFlyout.addClass('js-flyout--active').stop().slideDown();
				huk.overlay.show();
				huk.viewport.fix();
				huk.navigation.flyout_open = true;
				huk.navigation.menu_open = true;
			} else {
				//close flyout because click on active
				if ($clickedFlyout.hasClass('js-flyout--active')) {
					huk.navigation.close();
					huk.navigation.menu_open = false;
				} else {
					huk.navigation.flyoutsContainer.find('.flyout').removeClass('js-flyout--active').stop().slideUp();
					$clickedFlyout.prependTo(huk.navigation.flyoutsContainer).addClass('js-flyout--active').stop().slideDown();
				}
			}
		},
		close: function () {
			// hide close-arrow for desktop menu
			huk.navigation.flyoutsClose.fadeOut(200);

			huk.overlay.hide();

			$('.js-flyout--active').slideUp(300, function () {
				huk.navigation.flyout_open = false;
				// // hide overlay

				huk.viewport.unfix();
				// level1 desktop active unterstrichen
				$('.navigation__list-item').removeClass('active');
				$(this).removeClass('js-flyout--active');
			}).fadeOut(50);

			if (!huk.search.getOpenFlyout) {
				$(window).trigger('resize');
			}

			if (huk.navigation.menu_open) {
				huk.viewport.unfix();
				$('.hamburger').removeClass('hamburger--active');
				$('.navigation__list').not('.navigation__list--level2').removeClass('navigation__list--active');
				$('.navigation--active').removeClass('navigation--active');
				huk.navigation.menu_open = false;
			}
		},
		clone: function () {
			$('.header .flyout').clone().appendTo(huk.navigation.flyoutsContainer);
			huk.navigation.flyoutsContainer.addClass('js-mainnav-flyouts');
		},
		hamburgerClick: function (el) {
			var nav = $('header .navigation'),
				navList = $('.navigation__list', nav).not('.navigation__list--level2');

			huk.viewport.definePageYOffset();
			// CLOSE
			if (huk.navigation.menu_open) {
				huk.navigation.close();
				huk.overlay.hide();
				el.removeClass('hamburger--active');
				nav.removeClass('navigation--active');
				navList.removeClass('navigation__list--active');
				huk.navigation.menu_open = false;
				$w.off('click');
			}
			// OPEN
			else {
				huk.navigation.menu_open = true;
				huk.viewport.fix();
				huk.overlay.show();

				el.addClass('hamburger--active');
				nav.addClass('navigation--active');
				navList.addClass('navigation__list--active');

				$w.on('click', function (e) {
					e.stopImmediatePropagation();
					var childClicked = $('.navigation__list').find($(e.target)).length > 0,
						burgerClicked = $('.hamburger').is(e.target),
						navigatorClicked = $('#navigator').find($(e.target)).length > 0,
						vmInfoDropdown = $('#headerVmDropdown').find($(e.target)).length > 0,
						vmInfoDropdownMobile = $('#headerVmDropdown__mobile').find($(e.target)).length > 0;

					if (!navigatorClicked && !childClicked && !burgerClicked && !vmInfoDropdown && !vmInfoDropdownMobile) {
						huk.navigation.close();
					}
				});
			}
		},
		toggleNavLevel2: function (t, showSibling) {
			$('.js-flyout--active .navigation__list').removeClass('navigation__list--active');
			if (showSibling) {
				$('.navigation__headline').removeClass('js--active');
				t.addClass('js--active');
				t.siblings('.navigation__list').addClass('navigation__list--active');
			}
		},
	}
});
$(huk.navigation.init);

// custom event polyfill (ie and safari)
(function () {
	if ( typeof window.CustomEvent === "function" ) return false;

	function CustomEvent ( event, params ) {
		params = params || { bubbles: false, cancelable: false, detail: undefined };
		var evt = document.createEvent( 'CustomEvent' );
		evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
		return evt;
	}
	CustomEvent.prototype = window.Event.prototype;
	window.CustomEvent = CustomEvent;
})();

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	navigator: {
		slideSpeed: 350,

		navigatorEl: $('#navigator'),
		flyoutWrapper: $('.navigator-flyout-wrapper'),
		openClass: 'navigator--open',
		// button stuff
		buttonInNavigator: $('.button--inside-navigator'),
		clonedFlyouts: null,
		clonedButtons: null,
		clonedFlyoutsClass : 'navigator__flyout--cloned',
		navigatorButtons: $('.navigator__button'),
		buttonBack: null,
		buttonBackClass: 'navigator__flyout--back',
		buttonActiveClass: 'navigator__button--active',
		buttonClonedClass: 'navigator__button--cloned',
		buttonSoftenedClass: 'navigator__button--softened',
		cloneOrigin: $('.navigator-flyout-wrapper'),
		cloneTarget: $('#extra'),
		cloned: false,

		closeButton: {
			className: 'navigator__close',
			element: $('.navigator__close'),
			show: function () {
				huk.navigator.closeButton.element.addClass(huk.navigator.closeButton.className+'--visible');
			},
			hide: function () {
				huk.navigator.closeButton.element.removeClass(huk.navigator.closeButton.className+'--visible');
			}
		},
		flyouts: {
			elements: $('.navigator__flyout'),
			opened: null,
			animated: false
		},
		init: function () {
			if (huk.navigator.navigatorEl.length > 0 || $('.header--tropiko').length > 0) {
				huk.navigator.bindEvents();

				if (huk.viewport.breakpoint !== 'L') {
					huk.navigator.moveToExtra();
				}
			}
		},
		bindEvents: function () {
			// CLICK ON NAVIGATOR BUTTON
			$(document).on('click dblclick', '.navigator__button', function (e) {
				e.preventDefault();
				e.stopPropagation();
				if ($(this).hasClass(huk.navigator.buttonClonedClass)) {
					huk.navigator.clickClone($(this));
				} else {
					huk.navigator.click($(this));
				}
			});
			$w.on('resize orientationchange', function () {
				huk.navigator.setWrapperMaxHeight();
			});
			// close on breakpoint change
			$w.on('breakpoint-change', function () {
				// if breakpoint is switched to "L"
				if (huk.viewport.breakpointBefore === 'L' || huk.viewport.breakpoint === 'L') {
					huk.navigator.closeMobile();
					huk.navigator.close();
				}


				// wechsel klein zu gross
				if (huk.viewport.breakpointBefore !== 'L' && huk.viewport.breakpoint === 'L') {
					huk.navigator.moveToOrigin();
				}
				// wechsel gross zu klein
				if (huk.viewport.breakpointBefore === 'L' && huk.viewport.breakpoint !== 'L') {
					huk.navigator.moveToExtra();
				}


			});
			// close on overlay click
			$(document).on('click', '#overlay', function () {
				huk.navigator.close();
			});
			// ESC-KEY
			$(window).on('esc-key', function () {
				huk.navigator.close();
			});
			// Close Button
			$(document).on('click', '.'+huk.navigator.closeButton.className, function () {
				huk.navigator.close();
			});
			// button back
			$(document).on('click', '.'+huk.navigator.buttonBackClass, function () {
				huk.navigator.closeMobile();
			});
		},
		setWrapperMaxHeight: function () {
			huk.navigator.flyoutWrapper.css({
				'max-height': ($(window).height() - huk.navigator.getFlyoutOffset()) + 'px' // set maxheight programatically
			});
		},
		setOpenFlyout: function (value) {
			huk.navigator.flyouts.opened = value;
		},
		getOpenFlyout: function () {
			return huk.navigator.flyouts.opened;
		},
		isOpenFlyout: function (flyout) {
			return huk.navigator.getOpenFlyout() === flyout;
		},
		isAnimated: function () {
			return huk.navigator.flyouts.animated;
		},
		getFlyoutOffset: function () {
			var offset = 0;
			switch (huk.viewport.breakpoint) {
				case 'L':
					offset = 68;
					break;
				case 'M':
					offset = 72;
					break;
				default:
					offset = 61;
			}
			return offset;
		},
		click: function (clickedButton) {
			// prevent click while active transition
			if (!huk.navigator.isAnimated()) {
				// is opened flyout clicked again or a different one?
				if (huk.navigator.isOpenFlyout(clickedButton.data('flyout-id'))) {
					huk.navigator.close();
				} else {
					huk.navigator.open(clickedButton);
				}
			}
		},
		toggleButtonState: function (button) {
			//set active state
			huk.navigator.navigatorButtons.removeClass(huk.navigator.buttonActiveClass);
			button.addClass(huk.navigator.buttonActiveClass);

			// on mobile - also soften not active button
			if (!huk.viewport.isDesktop()) {

				var btnExtra = $('.navigator__button--extra'),
					btnMeineHuk = $('.navigator__button--meinehuk');

				if (button.hasClass('navigator__button--extra')) {
					btnExtra.removeClass(huk.navigator.buttonSoftenedClass);
					btnMeineHuk.toggleClass(huk.navigator.buttonSoftenedClass);
				}
				else if (button.hasClass('navigator__button--meinehuk')) {
					btnExtra.toggleClass(huk.navigator.buttonSoftenedClass);
					btnMeineHuk.removeClass(huk.navigator.buttonSoftenedClass);
				}
			}
		},
		resetButtonState: function () {
			huk.navigator.navigatorButtons.removeClass(huk.navigator.buttonActiveClass + ' ' + huk.navigator.buttonSoftenedClass);
		},
		open: function (navigatorButton) {
			var flyoutElement = $('#' + navigatorButton.data('flyout-id'));


			// sets height auto
			huk.navigator.navigatorEl.addClass(huk.navigator.openClass);

			// set wrapper maxheight
			huk.navigator.setWrapperMaxHeight();

			// set clicked button active
			huk.navigator.toggleButtonState(navigatorButton);


			// if navigator is not fixed yet: scroll to fixPosition and open
			// else: open it directly
			if (!huk.stickyHeader.navigator.isFixed && !huk.stickyHeader.isTropiko) {
				// todo exclude scrollto fn
				$scrollEls.animate({
					scrollTop: huk.stickyHeader.navigator.fixedPosY + 1 // + 1 for internet explorer...
				}, huk.navigator.slideSpeed, function () {
					// needs promise cause there are two target elements, otherwise callback would be fired twice
				}).promise().then(function () {
					// important to check scroll once again here
					huk.stickyHeader.checkScrollPosition();
					// called only one time
					huk.navigator.openFlyout(flyoutElement);
				});
			}
			else {
				huk.navigator.openFlyout(flyoutElement);
			}
		},
		slideDownFlyout: function (flyoutElement) {
			flyoutElement.slideDown(huk.navigator.slideSpeed, function () {
				huk.navigator.flyouts.animated = false;

				var mapBezeichner = flyoutElement.closest('[data-mapname]').data('mapname');
				huk.navigator.fireFlyoutOpenEvent(mapBezeichner);
			});
		},
		openFlyout: function (flyoutElement) {
			var openFlyout = huk.navigator.getOpenFlyout();
			huk.viewport.fix();
			huk.navigator.flyouts.animated = true;

			// if a flyout is already opened: switch the open flyout
			if (openFlyout) {
				$('#' + openFlyout).slideUp(huk.navigator.slideSpeed);
				flyoutElement.prependTo(huk.navigator.flyoutWrapper);
				huk.navigator.slideDownFlyout(flyoutElement);
			} else {
				huk.navigator.slideDownFlyout(flyoutElement);
			}

			// show content overlay
			huk.overlay.show();

			// store opened flyout
			huk.navigator.setOpenFlyout(flyoutElement.attr('id'));

			//show navigator close button
			huk.navigator.closeButton.show();





		},
		close: function () {
			var openFlyout = huk.navigator.getOpenFlyout();

			huk.navigator.closeMobile();

			// important check if a flyout is open
			if (openFlyout) {

				// gets opened element and closes it
				huk.navigator.resetButtonState();
				huk.navigator.closeButton.hide();
				huk.navigator.flyouts.animated = true;

				$('#' + openFlyout).slideUp(huk.navigator.slideSpeed, function () {
					// button beitrag berechnen
					huk.navigator.buttonInNavigator.fadeIn();

					huk.navigator.setOpenFlyout(null);
					huk.navigator.flyouts.animated = false;
					huk.navigator.navigatorEl.removeClass(huk.navigator.openClass);

					huk.overlay.hide();
					huk.viewport.unfix();
					// important to re-check positioningValues
					huk.stickyHeader.setPositioningValues();

					// fires close event for angular app
					var event = new CustomEvent('flyoutClosed');
					// Dispatch the event.
					window.dispatchEvent(event);
				});
			}
		},
		fireFlyoutOpenEvent: function (mapBezeichner) {
			if (typeof mapBezeichner !== 'undefined') {
				$(window).trigger('flyout-opened',[mapBezeichner]);
			}
		},
		clickClone: function (clickedButton) {

			// prevent click while active transition
			if (!huk.navigator.isAnimated()) {
				var flyoutToOpen = clickedButton.data('flyout-id');

				huk.navigator.buttonBack.show();

				huk.navigator.clonedButtons
					.hide()
					.filter(function () {
						return $(this).hasClass('navigator__button--' + flyoutToOpen);
					}).addClass(huk.navigator.buttonActiveClass).show();

				huk.navigator.clonedFlyouts
					.hide()
					.filter(function () {
						return $(this).hasClass('navigator__flyout--' + flyoutToOpen);
					}).show();


				var mapBezeichner = $('.navigator__flyout--' + flyoutToOpen).closest('[data-mapname]').data('mapname');
				huk.navigator.fireFlyoutOpenEvent(mapBezeichner);


				// button beitrag berechnen
				huk.navigator.buttonInNavigator.hide();
			}
		},
		closeMobile: function () {
			if (huk.navigator.cloned) {
				huk.navigator.clonedButtons.removeClass(huk.navigator.buttonActiveClass).show();
				huk.navigator.buttonBack.hide();
				huk.navigator.clonedFlyouts.hide()
			}
		},


		moveToOrigin: function () {
			if (huk.navigator.cloned) {
				// copy buttons and content into an cloneTarget container for mobile+tablet view and rename IDs
				huk.navigator.navigatorEl.find('.'+huk.navigator.buttonClonedClass).remove().removeClass(huk.navigator.buttonClonedClass);
				$('#standort').removeClass(huk.navigator.clonedFlyoutsClass).appendTo(huk.navigator.cloneOrigin);
				$('#kontakt').removeClass(huk.navigator.clonedFlyoutsClass).appendTo(huk.navigator.cloneOrigin);
				$('#schaden').removeClass(huk.navigator.clonedFlyoutsClass).appendTo(huk.navigator.cloneOrigin);

				huk.navigator.clonedFlyouts = null;
				huk.navigator.clonedButtons = null;
				huk.navigator.buttonBack = null;
				huk.navigator.cloned = false;
			}
		},
		moveToExtra: function () {
			if (!huk.navigator.cloned) {

				// copy buttons and content into an cloneTarget container for mobile+tablet view and rename IDs
				huk.navigator.navigatorEl.find('.navigator__button--standort').clone().addClass(huk.navigator.buttonClonedClass).appendTo(huk.navigator.cloneTarget);
				$('#standort').addClass(huk.navigator.clonedFlyoutsClass).appendTo(huk.navigator.cloneTarget);


				huk.navigator.navigatorEl.find('.navigator__button--kontakt').clone().addClass(huk.navigator.buttonClonedClass).appendTo(huk.navigator.cloneTarget);
				$('#kontakt').addClass(huk.navigator.clonedFlyoutsClass).appendTo(huk.navigator.cloneTarget);

				huk.navigator.navigatorEl.find('.navigator__button--schaden').clone().addClass(huk.navigator.buttonClonedClass).appendTo(huk.navigator.cloneTarget);
				$('#schaden').addClass(huk.navigator.clonedFlyoutsClass).appendTo(huk.navigator.cloneTarget);


				huk.navigator.clonedFlyouts = $('.'+huk.navigator.clonedFlyoutsClass);
				huk.navigator.clonedButtons = $('.'+huk.navigator.buttonClonedClass);
				huk.navigator.buttonBack = $('.'+huk.navigator.buttonBackClass);

				huk.navigator.cloned = true;

			}
		}
	}
});
$(huk.navigator.init);

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	// todo: rename component
	stickyHeader: {
		header: {
			element: $('#site-header'),
			fixedPosY: null,
			height: null,
			isFixed: true,
			cssClassAbsolute: 'header--absolute'
		},
		isTropiko: null,
		navigator: {
			element: $('#navigator'),
			fixedPosY: null,
			height: null,
			isFixed: false,
			cssClassFixed: 'navigator--fixed'
		},
		balken: {
			element: $('#headerVmDropdown__mobile'),
			bar: $('#headerVmWrapper'),
			barMobile: $('#headerVmInfoBalken__mobile'),
			barButton: $('.header__vmwrapper__vmbar__right'),
			barHeight: 0,
			overlay: null,
			menu_open: false, // Boolean der signalisiert, dass VM INfo Dropdown offen/zu ist
			cssClassAbsolute: 'header__vmwrapper--absolute',
			cssClassFixed: 'headerVmDropdown--fixed'
		},
		init: function () {
			huk.stickyHeader.isTropiko = huk.stickyHeader.header.element.hasClass('header--tropiko');

			if (!huk.stickyHeader.isTropiko) {
				// initial
				huk.stickyHeader.setPositioningValues();

				// todo: check passive scroll events on: touch devices + internet explorer
				window.addEventListener('scroll', function() {
					huk.stickyHeader.checkScrollPosition();
				}, { passive: true });
				$(window).on('resize-end', function () {
					if(huk.stickyHeader.balken.bar.length !== 0) {
						huk.stickyHeader.balken.barHeight = huk.stickyHeader.getHeight(huk.stickyHeader.balken.barButton);
					}
					huk.stickyHeader.setPositioningValues();
					huk.stickyHeader.checkScrollPosition();
					huk.stickyHeader.header.element.css({
						top: huk.stickyHeader.balken.barHeight
					});
				});

				var vmInfoBalken = $('#headerVmInfoBalken'),
					vmInfoDropdown = $('#headerVmDropdown'),
				 	vmInfoCross = $('.header__vmwrapper__vmbar__dropdown--cross'),
					vmInfoCloseButton = $('.header__vmwrapper__dropdown--closeButton'),
				 	vmInfoBalkenMobile = $('#headerVmInfoBalken__mobile'),
				 	vmInfoDropdownMobile = $('#headerVmDropdown__mobile'),
					vmInfoCrossMobile = $('.header__vmwrapper__vmbar__dropdown__mobile--cross'),
					vmInfoCloseButtonMobile = $('.header__vmwrapper__dropdown__mobile--closeButton');

				$('<div></div>', {
					'id' : 'overlay--vmgsHeader',
					'class' : 'overlay'
				}).appendTo('body');
				huk.stickyHeader.balken.overlay = $('#overlay--vmgsHeader');

				// Click Handler für Desktop VM Info Balken + Buttons
				vmInfoBalken.add(vmInfoCross).add(vmInfoCloseButton).on('click', function() {
					huk.stickyHeader.vmInfoButtonClick($(this), vmInfoDropdown, vmInfoBalken);
				})

				// Click Handler für VM Info Overlay Hintergrund => erscheint bei geöffnetem Dropdown
				// Falls auf Hintergrund geklickt wird, soll sich der VM Info Dropdown schließen
				huk.stickyHeader.balken.overlay.on('click', function() {
					huk.stickyHeader.hideVmDetailInfos($(this), vmInfoDropdown, vmInfoBalken);
					huk.stickyHeader.hideVmDetailInfos($(this), vmInfoDropdownMobile, vmInfoBalkenMobile);
				})

				// Click Handler für Mobile VM Info Balken + Buttons
				vmInfoBalkenMobile.add(vmInfoCloseButtonMobile).add(vmInfoCrossMobile).on('click', function() {
					huk.stickyHeader.vmInfoButtonClick($(this), vmInfoDropdownMobile, vmInfoBalkenMobile);
				})
			}

			// Click handler for logout links
			document.querySelectorAll('[data-behavior=logout-link]').forEach(link => {
				link.addEventListener('click', (event)=> {
					event.preventDefault();
					fetch('/login/api/session/logout?mandant=HUKDE', {
						credentials: 'include'
					}).then(response => {
						var logoutRedirect = link.dataset.logoutRedirect;
						if (huk.vmgsPath && huk.vmgsPath.indexOf('$') === -1) {
							logoutRedirect = huk.vmgsPath + logoutRedirect;
						}
						window.location.href = logoutRedirect;
					})
					return false;
				});
			});
		},
		vmInfoButtonClick: function (el, dropdown, balken) {
			//Prüfung ob VM Info Dropdown offen ist
			if (huk.stickyHeader.balken.menu_open) { // Dropdown ist offen
				// Closing Click Event soll nicht greifen, wenn direkt auf das VM Info Dropdown <div> Element, auf das VM Info Text <div> Element oder ein darunterliegendes
				// Textelement geklickt wurde. Dies gilt für Mobile und Desktop
				huk.stickyHeader.hideVmDetailInfos(el, dropdown, balken);
			}
			else { // Dropdown ist zu
				if (huk.navigation.flyout_open || huk.navigation.menu_open) { //Navigation wird geschlossen
					huk.navigation.close();
				}
				huk.stickyHeader.showVmDetailInfos(el, dropdown, balken);
			}
		},
		showVmDetailInfos: function(el, dropdown, balken) {
			event.stopImmediatePropagation(); // Verhindert Weitergabe von Click Event an nächsten Click Handler
			var textContainer = dropdown.find('.richtext');
			huk.stickyHeader.balken.menu_open = true;
			huk.stickyHeader.viewPortFix(); // Fixiert Viewport => Scrolling ist nicht mehr möglich
			dropdown.slideDown({
				complete: function() {
					dropdown.css('min-height', '5rem');
					dropdown.addClass('active');
					textContainer.css('overflow-y', 'auto');
					dropdown.css('display', ''); // slideDown() fügt ein 'display: block' an, was dazu führt, dass das media query nicht mehr zieht
				}
			});
			balken.addClass('active');
			huk.stickyHeader.balken.overlay.addClass('overlay--active'); // Weiß durchsichtiger Hintergrund Overlay wird eingeblendet
		},
		hideVmDetailInfos: function(el, dropdown, balken) {
			event.stopImmediatePropagation(); // Verhindert Weitergabe von Click Event an nächsten Click Handler
			var textContainer = dropdown.find('.richtext');
			huk.viewport.unfix(); // Befreit Viewport => Scrolling ist wieder möglich
			dropdown.removeClass('active');
			dropdown.css('display', 'block') // fügt das 'display: block' von slideDown() wieder an, damit die slideUp() Animation flüssig verläuft
			dropdown.css('min-height', '0rem');
			textContainer.css('overflow-y', 'hidden');
			dropdown.slideUp({
				complete: function () {
					balken.removeClass('active');
					dropdown.css('min-height', '0');
					huk.stickyHeader.balken.menu_open = false;
				}
			});
			huk.stickyHeader.balken.overlay.removeClass('overlay--active'); // Weiß durchsichtiger Hintergrund Overlay wird ausgeblendet
		},
		getNavigatorOffsetY: function () {
			var offset= 0,
				stage = $('.stage');
			if (stage.length > 0) {
				if (!huk.stickyHeader.isTropiko) {
					offset = stage.outerHeight() + stage.offset().top;
				}
			}
			return offset;

		},
		getHeight: function (element) {
			return element.height();
		},
		getOuterHeight: function (element) {
			return element.outerHeight();
		},
		calcHeaderFixedPosY: function () {
			return huk.stickyHeader.getNavigatorOffsetY(huk.stickyHeader.navigator.element) - huk.stickyHeader.getHeight(huk.stickyHeader.header.element);
		},
		positionHeader: function (CoordYpx) {
			huk.stickyHeader.header.element.css({
				top: CoordYpx
			});

			if(huk.stickyHeader.balken.bar.length !== 0) {
				var vmBarCoordYpx = 0;

				if(CoordYpx !== huk.stickyHeader.balken.barHeight) { // header is being unfixed
					vmBarCoordYpx = CoordYpx - huk.stickyHeader.balken.barHeight;
				}

				huk.stickyHeader.balken.bar.css({
					top: vmBarCoordYpx
				});
			}
		},
		setPositioningValues: function () {
			huk.stickyHeader.header.height = huk.stickyHeader.getHeight(huk.stickyHeader.header.element);
			huk.stickyHeader.header.fixedPosY = huk.stickyHeader.calcHeaderFixedPosY();

			huk.stickyHeader.navigator.height = huk.stickyHeader.getOuterHeight(huk.stickyHeader.navigator.element);
			huk.stickyHeader.navigator.fixedPosY = huk.stickyHeader.getNavigatorOffsetY(huk.stickyHeader.navigator.element);
		},
		fixHeader: function () {
			if (!huk.stickyHeader.header.isFixed) {
				huk.stickyHeader.header.element.removeClass(huk.stickyHeader.header.cssClassAbsolute);
				huk.stickyHeader.balken.bar.removeClass(huk.stickyHeader.balken.cssClassAbsolute);
				huk.stickyHeader.header.isFixed = true;
				huk.stickyHeader.positionHeader(huk.stickyHeader.balken.barHeight);
			}
		},
		unfixHeader: function () {
			huk.stickyHeader.header.element.addClass(huk.stickyHeader.header.cssClassAbsolute);
			huk.stickyHeader.balken.bar.addClass(huk.stickyHeader.balken.cssClassAbsolute);
			huk.stickyHeader.header.isFixed = false;
			if(!huk.stickyHeader.balken.menu_open) {
				huk.stickyHeader.positionHeader(huk.stickyHeader.header.fixedPosY);
			}
		},
		fixNavigator: function () {
			if (!huk.stickyHeader.navigator.isFixed) {
				huk.stickyHeader.navigator.element.addClass(huk.stickyHeader.navigator.cssClassFixed);
				huk.stickyHeader.navigator.isFixed = true;
			}
		},
		unfixNavigator: function () {
			if (huk.stickyHeader.navigator.isFixed) {
				huk.stickyHeader.navigator.element.removeClass(huk.stickyHeader.navigator.cssClassFixed);
				huk.stickyHeader.navigator.isFixed = false;
			}
		},
		checkScrollPosition: function () {
			var scrollTop = window.pageYOffset;

			var vmBarHeight = 0;

			if(huk.stickyHeader.balken.bar.is(':visible')) {
				vmBarHeight = $('#headerVmInfoBalkenLeft').height();
			}

			if (!huk.viewport.fixed && !huk.stickyHeader.isTropiko) {
				if (scrollTop >= (huk.stickyHeader.header.fixedPosY - vmBarHeight)) {
					huk.stickyHeader.unfixHeader();
				} else {
					huk.stickyHeader.fixHeader();
				}
				if (scrollTop >= huk.stickyHeader.navigator.fixedPosY) {
					huk.stickyHeader.fixNavigator();
				} else {
					huk.stickyHeader.unfixNavigator();
				}
			}
		},
		viewPortFix: function () {
			if (!huk.viewport.fixed) {
				huk.viewport.body.addClass('body--fixed');
				huk.viewport.fixed = true;
			}

		}
	}
});
$(huk.stickyHeader.init);

$.extend(huk, {
	cmTeaser: {
		els: $('.cmteaser'),
		rows: $('.cmteaser-wrapper').children(),
		init: function () {
			if (huk.cmTeaser.els.length > 0) {
				huk.cmTeaser.matchHeights();
				$(window).on('load', function () {
					huk.cmTeaser.matchHeights();
				});
				$(window).on('resize orientationchange',
					huk.utils.throttle(huk.cmTeaser.matchHeights, 100)
				);
			}
		},
		matchHeights: function () {
			if (huk.viewport.breakpoint !== 'S') {
				huk.cmTeaser.rows.each(function () {
					var $teasersInRow = $(this).find('.cmteaser');
					if ($teasersInRow.length > 1) {
						$teasersInRow.height(huk.cmTeaser.getMaxHeight($teasersInRow));
					}
				});
			} else {
				huk.cmTeaser.els.height('');
			}
		},
		getMaxHeight: function ($teasers) {
			var maxHeight = 0,
				offsetTop = $teasers.first().offset().top;

			$teasers.each(function () {
				if ($(this).offset().top === offsetTop && $(this).height('auto').height() >= maxHeight) {
					maxHeight = $(this).parent().height();
					$(this).addClass('cmteaser--js-fixedHeight');
				}
			});
			return maxHeight;
		}
	}
});
$(huk.cmTeaser.init);
var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	aufklapper: {
//TODO: check if we need it with Jan
		openClass: 'aufklapper__item--collapsed',
		elements: document.querySelectorAll('.aufklapper__header'),
		init: function () {
			// bind triggered from outside
			// nur relevant für alte (nicht Shield) Akkordeons
			// Achtung: Der Name ist irreführend. Ein geschlossenes Akkordeon wird geöffnet, ein offenes Akkordeon wird geschlossen
			$(document).on('open-accordion', function (event, element) {
				huk.aufklapper.toggle(element);
			});

			// bind click
			for (var i = 0; i < huk.aufklapper.elements.length; i++) {
				var element = huk.aufklapper.elements[i];
				element.addEventListener('click', function (event) {
					event.preventDefault();
					$(document).trigger('open-accordion', [this.parentNode]);
				}, false);
			}
		},
		// öffnet oder schließt ein altes (nicht Shield) Akkordeon
		toggle: function (element) {
			element.classList.toggle(huk.aufklapper.openClass);
		},
		// öffnet ein zu einem Anker gehörendes Akkorden falls vorhanden (altes und Shield Akkordeon)
		openAccordionBelongingToAnchor: function ($anchor) {
			// öffnet ein Shield-Akkordeon
			var accordion = huk.aufklapper.getShieldAccordionBelongingToAnchor($anchor);
			if (accordion) {
				huk.aufklapper.openShieldAccordion(accordion);
			}
		},
		// liefert zu einem Anker das zugehörige Shield-Akkordeon, oder undefined falls nicht vorhanden
		getShieldAccordionBelongingToAnchor: function($anchor) {
			if ($anchor.next().prop("tagName") == 'S-EXPANSION-PANEL') {
				return $anchor.next();
			}
			return undefined;
		},
		openShieldAccordion: function($accordion) {
			if (!$accordion.hasClass("s-expansion-panel--open")) {
				$accordion.find('.s-expansion-panel__head').click();
			}
		}
	}
});
$(huk.aufklapper.init);

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	backToTop: {
		_selector: '.back-to-top',
		_scrollTrigger: $(window).height(),
		_lastScrollTop: 0,
		init: function () {
			huk.backToTop._bindEvents();
		},
		_bindEvents: function () {
			// todo: check passive scroll events on: touch devices + internet explorer
			window.addEventListener('scroll', function() {
				huk.backToTop._activateBtn();
			}, { passive: true });
			$(huk.backToTop._selector).on('click', huk.backToTop._animateTop);
		},
		_activateBtn: function () {
			var scrollTop = $(window).scrollTop();
			if (huk.backToTop._lastScrollTop > scrollTop) {
				$(huk.backToTop._selector).addClass('back-to-top--show');
			}
			else {
				$(huk.backToTop._selector).removeClass('back-to-top--show');
			}
			if (scrollTop === 0)
				$(huk.backToTop._selector).removeClass('back-to-top--show');
			huk.backToTop._lastScrollTop = scrollTop;
		},
		_animateTop: function () {
			$scrollEls.animate({
				scrollTop: 0
			}, 700);
		}
	}
});
$(huk.backToTop.init);

var huk;
if (!huk) {
    huk = {};
}


$.extend(huk, {
    table: {
        init: function () {
            huk.table.setEvents();
            huk.table.initToggler();
            huk.table.toggle();
            huk.table.checkOverflow();
            huk.table.setClasses();
        },
        setClasses: function () {
            $('table tbody ').each(function () {
                var max = 0;
                $(this).children('tr').each(function () {
                    var tdcount = 0
                    $(this).children('td,th').each(function () {
                        if ($(this).attr('colspan')) {
                            tdcount = tdcount + Number($(this).attr('colspan'));
                        } else {
                            tdcount++;
                        }
                    });
                    max = (tdcount > max) ? tdcount : max;
                });
                $(this).parent('table').toggleClass("table-" + max + "-col");
            });
        },
        setEvents: function () {
            if (huk.utils.isTouchDevice()) {
                $(document).on('touchmove click', '.table--native-scrollable table', function () {
                    $(this).closest('.table--native-scrollable').addClass('touched');
                });
            }
        },
        initToggler: function () {
            //TODO Shield Refactoring. this is code for old table. Delete this code during cleanup phase
            $(document).on('click', '.table-toggler', function () {
                var $btn = $(this),
                    $table = $btn.prev(),
                    text = $btn.attr('data-toggle-table-alt-text');

                $table.toggleClass('table--expanded');
                $btn.attr('data-toggle-table-alt-text', $btn.text());
                $btn.text(text);
                $btn.toggleClass('table-toggler--collapsed table-toggler--active');
                if (!$table.hasClass('table--expanded')) {
                    $scrollEls.scrollTop($table.offset().top - 70);
                }
            });
            //TODO Shield Refactoring. Until this position
            $(document).on('click', '.c_table_toggler', function () {
                var $btn = $(this),
                    $table = $btn.prev(),
                    text = $btn.attr('data-toggle-table-alt-text'),
                    textSpan = $btn.find("span").first();
                $table.toggleClass('c_table--expanded');
                $btn.attr('data-toggle-table-alt-text', $btn.text());
                $btn.children('span').each(function () {
                    $(this).html(text);
                });
                $btn.toggleClass('c_table_toggler--collapsed c_table_toggler--active');
                if (!$table.hasClass('c_table--expanded')) {
                    $scrollEls.scrollTop($table.offset().top - 70);
                }
            });

        },
        toggle: function () {
            //TODO Shield Refactoring. this is code for old table. Delete this code during cleanup phase
            $('table .table__col-toggle').on('click', function () {
                var index = $(this).parents('th').index() + 1,
                    parent = $(this).parents('table');

                parent.find('tr td:nth-child(' + index + '),tr th:nth-child(' + index + ')').toggleClass('toggle-content-hidden');
                // close all opened tooltip
                huk.tooltip.destroyAll();
            });
            //TODO Shield Refactoring. Until this position
        },
        checkOverflow: function () {
            $('.table--native-scrollable').each(function () {
                var container = $(this),
                    table = container.find('table'),
                    hasHorizontalScrollbar = table.width() > container.width();
                if (hasHorizontalScrollbar) {
                    container.addClass('table--touch-overflow');
                }
            });
        },
        addTooltipClass: function () {

        },
    }
});
$(huk.table.init);

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	tooltip: {
		activeHandler: null,
		offset: 0,
		elements: $('.tooltip__handler'),
		activeClass: 'tooltip__handler--active',
		ajaxErrorText: 'Error loading ajax content',
		activeOffset: 0,
		init: function () {
			huk.tooltip.bindEvents();
			huk.tooltip.elements.each(function () {
				huk.tooltip.addColor($(this));
				huk.tooltip.appendText($(this));
			});
		},
		bindEvents: function () {
			huk.tooltip.elements.on('click', huk.tooltip.toggleTooltip);
			$(document).on('click', '.tooltip__close', huk.tooltip.destroyAll);
			huk.tooltip.elements.on('touchend', function (e) {
				e.stopPropagation();
			});
			$(window).on('resize', function () {
				if (huk.tooltip.activeHandler) {
					huk.tooltip.reposition(huk.tooltip.activeHandler);
				}
			});
		},
		addColor: function (tooltipElement) {
			var color = huk.tooltip.getColor(tooltipElement);
			if (color !== null) {
				tooltipElement.addClass('tooltip__handler--' + color);
			}
		},
		getColor: function (handlerElement) {
			var color = handlerElement.data('tooltip-color');
			return (typeof color !== 'undefined' && color.length > 0) ? color : null;
		},
		hasText: function (tooltipElement) {
			var text = tooltipElement.data('tooltip-text');
			return (typeof text !== 'undefined' && text.length !== 0);
		},
		getText: function (tooltipElement) {
			return tooltipElement.data('tooltip-text');
		},
		getContentUrl: function (tooltipElement) {
			var url = tooltipElement.data('tooltip-contenturl');
			return (typeof url !== 'undefined' && url.length > 0) ? tooltipElement.data('tooltip-contenturl') : null;
		},
		appendText: function (tooltipElement) {
			var url = huk.tooltip.getContentUrl(tooltipElement);
			if (!huk.tooltip.hasText(tooltipElement) && url !== null) {
				$.ajax({
					cache: true,
					url: url
				})
				.done(function (data) {
					tooltipElement.data('tooltip-text', data);
				})
				.fail(function () {
					tooltipElement.data('tooltip-text', huk.tooltip.ajaxErrorText);
				});
			}
		},
		close: function (tooltipElement) {
			huk.tooltip.destroyAll();
			// spezialfall für tabellen
			if (huk.tooltip.isInTable(tooltipElement)) {
				tooltipElement.parent().find('.table__col-toggle').show();
				$('.table--native-scrollable')
					.scrollLeft(huk.tooltip.offset)
					.css('marginLeft', '')
					.removeClass('table--native-scrollable-disabled');
				$('.content').css('overflow', '');
			}
		},
		isInTable: function (tooltipElement) {
			return tooltipElement.parents('.table--native-scrollable').length > 0;
		},
		getOffsetFrom: function(tooltipHandler, offsetParent) {
			return tooltipHandler.offset().top - offsetParent.offset().top;
		},
		reposition: function(tooltipHandler) {
			// reposition if offset changes (handler moved to different position)
			var offset = huk.tooltip.getOffsetFrom(tooltipHandler, tooltipHandler.closest('.row'));
			if (huk.tooltip.activeOffset !== offset) {
				huk.tooltip.activeOffset = offset;
				$('.tooltip:visible').css({top: offset})
			}
		},
		show: function (tooltipHandlerElement) {
			// create a new tooltip for the current element
				var parentRow = tooltipHandlerElement.closest('.table').parent(),
					offset = {};
				parentRow[0].style.position ="relative";
			offset.top = huk.tooltip.getOffsetFrom(tooltipHandlerElement, parentRow);
			huk.tooltip.activeOffset = offset.top;
			var tooltipElement = $(huk.tooltip.createTooltip(tooltipHandlerElement))
				.appendTo(parentRow)
				.css({top: offset.top});

			tooltipHandlerElement.addClass(huk.tooltip.activeClass);

			// save active tooltip
			huk.tooltip.activeHandler = tooltipHandlerElement;

			// spezialfall für tabellen
			if (huk.tooltip.isInTable(tooltipHandlerElement)) {
				tooltipElement.addClass('tooltip--inScrollableTable');
			}
		},
		isActive: function (tooltipElement) {
			return tooltipElement.hasClass(huk.tooltip.activeClass);
		},
		toggleTooltip: function (event) {
			event.stopPropagation();
			var clickOnActive = huk.tooltip.isActive($(this));
			huk.tooltip.destroyAll();
			// is active tooltip not clicked again?
			if (!clickOnActive) {
				huk.tooltip.show($(this));
			}
		},
		createTooltip: function (tooltipElement) {
			var text = huk.tooltip.getText(tooltipElement);
			var color = huk.tooltip.getColor(tooltipElement);
			var colorClass = '';

			if (color !== null) {
				tooltipElement.addClass('tooltip__handler--' + color);
				colorClass = ' tooltip--' + color;
			}

			return $(
				'<div class="tooltip' + colorClass + '">' +
				'<div class="tooltip__text">' + text + '</div>' +
				'<span class="tooltip__close"></span>' +
				'</div>'
			);
		},
		destroyAll: function () {
			huk.tooltip.activeHandler = null;
			huk.tooltip.activeOffset = 0;

			var parentRow = $("."+huk.tooltip.activeClass).closest('.table').parent();
			parentRow.css("position", "");

			$('.tooltip').hide().remove();
			$('.tooltip__handler').removeClass(huk.tooltip.activeClass);


			$('.table--native-scrollable')
				.css('marginLeft', '')
				.removeClass('table--native-scrollable-disabled')
				.find('.table__col-toggle').show();
		}
	}
});
$(huk.tooltip.init);

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	slider: {
		obj: [],
		init: function () {
			var $sliders = $('.slider');
			$sliders.each(function (index) {
				$(this).attr('id', 'slider' + index);
				huk.slider.obj[index] = $('#slider' + index).swiper({
					pagination: '.slider__pagination',
					paginationClickable: true,
					bulletClass: 'slider__pagination-indicator',
					bulletActiveClass: 'slider__pagination-indicator--active',
					nextButton: '.slider__button--next',
					prevButton: '.slider__button--prev',
					spaceBetween: 30,
					calculateHeight: true,
					autoplay: 5000,
					speed: 2000,
					autoplayDisableOnInteraction: false,
					loop: true
				});
			});
			$sliders.on('hover', function () {
				huk.slider.obj[$(this).attr('id').slice(-1)].stopAutoplay();
			}, function () {
				huk.slider.obj[$(this).attr('id').slice(-1)].startAutoplay();
			});
		}
	}
});
$(huk.slider.init);

var huk;
if (!huk) {
    huk = {};
}

$.extend(huk, {
    praesentation: {
        init: function () {
            var sliderEls = $('.praesentation__slider'),
                swiperInstances = {};
            sliderEls.each(function (index, el) {
                swiperInstances[index] = new Swiper(el, {
                    pagination: $(el).parent().next('.praesentation__pagination'),
                    paginationClickable: true,
                    bulletClass: 'slider__pagination-indicator',
                    bulletActiveClass: 'slider__pagination-indicator--active',
                    slidesPerView: 4,
                    nextButton: $(el).parent().find('.praesentation__button--next'),
                    prevButton: $(el).parent().find('.praesentation__button--prev'),
                    spaceBetween: 10,
                    calculateHeight: true,
                    speed: 800,
                    loop: false,
                    breakpoints: {
                        // when window width is <= 600px
                        599: {
                            slidesPerView: 1
                        },
                        800: {
                            slidesPerView: 2
                        },
                        1023: {
                            slidesPerView: 3
                        }
                    }
                });
            });
        }
    }
});
$(huk.praesentation.init);
var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	video: {
		players: {},
		init: function () {
			huk.video.hideShow();
			if(huk.cookiesettings.hasConsentMarketing()) {
				huk.video._getApi();
				huk.video._initYTApi();
				huk.video._playVideo();
			}
		},
		_initYTApi: function () {
			if (typeof (YT) === 'undefined' || typeof (YT.Player) === 'undefined') {
				window.onYouTubeIframeAPIReady = function () {
					huk.video._createPlayer();
				};

			} else {
				huk.video._createPlayer();
			}
		},
		_createPlayer: function () {
			var players = document.querySelectorAll('.video__wrapper div');
			for (var i = 0; i < players.length; i++) {
				huk.video.players[i] = new YT.Player(players[i], {
					videoId: players[i].dataset.id,
					host: 'https://www.youtube-nocookie.com',
					playerVars: {
						autoplay: 0,
						controls: 1,
						modestbranding: 1,
						rel: 0,
						showInfo: 0
					},
					events: {
						'onStateChange': huk.video._onStateChange
					}
				});
			}
		},
		_playVideo: function () {
			$('.video__thumb').on('click', function () {
				$(this).closest('.video').removeClass('video--thumb-switch-on');
				var videoIndex = $('.video').index($(this).closest('.video'));
				huk.video.players[videoIndex].playVideo();
			});
		},
		_onStateChange: function (event) {
			if (event.data === 0) {
				$(event.target.a).parents('.video').addClass('video--thumb-switch-on');
			}
			if (window.profondoTrack) {
				window.profondoTrack(event);
			}
		},
		_getApi: function () {
			$.getScript('//www.youtube.com/iframe_api');
		},

		hideShow: function () {
			if(huk.cookiesettings.hasConsentMarketing()) {
				$(".hasCookie").show();
				$(".hasNoCookie").hide();
			} else {
				$(".hasCookie").hide();
				$(".hasNoCookie").show();
			}
		},
	}
});

$(document).ready( function() {
	$(huk.video.init);
});

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	plzOrtAutocomplete: {
		plzOrtCache: {},
		init: function () {
			var $element = $('.input_plz_ort');
			if ($element.length > 0) {

				$element.autocomplete({
					minLength: 3,
					delay: 500,
					select: function (event, ui) {
						$(this).val(ui.item.value);
						if (!$(this).hasClass('noautosubmit')) {
							$(this).closest('.col').find('.submit_plz_ort')[0].click();
						}
					},
					source: function (request, response) {
						var fieldValue = request.term;
						if (huk.plzOrtAutocomplete.plzOrtCache[fieldValue]) {
							response(huk.plzOrtAutocomplete.plzOrtCache[fieldValue]);
						} else {
							$.ajax({
								url: huk.vmsucheCommon.settings.plzortServletUrl,
								dataType: huk.vmsucheCommon.settings.jsonType,
								data: {
									plzort: fieldValue
								},
								method: 'post',
								success: function (data) {
									huk.plzOrtAutocomplete.plzOrtCache[fieldValue] = data;
									// wenn das Suchfeld noch sichtbar ist (Vorschläge waren schneller da als
									// ein eventuelles Suchergebnis) und aktuell keine Suche läuft, dann zeige die Vorschläge an
									if ($('.ui-autocomplete-input').is(':visible') && !huk.vmsucheCommon.isRunning) {
										response(data);
									}
								}
							});
						}
					}
				}).on('focus', function () {
					if (!$(this).autocomplete('widget').is(':visible')) {
						var fieldValue = $(this).val();
						$(this).data('ui-autocomplete').search(fieldValue);
						$(this).attr('autocorrect', 'off').attr('autocapitalize', 'off').attr('spellcheck', false);
					}
				});
			}
		},
		hide: function () {
			$('.ui-autocomplete').hide();
		}
	}
});

$(document).ready(function () {
	huk.plzOrtAutocomplete.init();
});

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	iconrowaufklapper: {
		container: $('[data-behave="iconrowaufklapper-container"]'),
		init: function () {
			if (huk.iconrowaufklapper.container.length > 0) {

				$(document).on('click', '.iconrowaufklapper-elements', function () {
					huk.iconrowaufklapper.toggleLongText($(this));
				});

				$(window).on('resize', function () {
					$('.iconrowaufklapper-elements__open').each(function(){
						huk.iconrowaufklapper.openLongText($(this));
					});
				});

			}
		},

		toggleLongText: function (element) {
			if (element.hasClass('iconrowaufklapper-elements__open')) {
				huk.iconrowaufklapper.closeLongText(element);
			} else {
				huk.iconrowaufklapper.openLongText(element);
			}
		},

		closeLongText: function (element) {
			element.removeClass('iconrowaufklapper-elements__open');
			element.siblings('.iconrowaufklapper-elements__longtext').remove();
		},

		openLongText: function (element) {
			var iconrowelements = element.parent().find('.iconrowaufklapper-elements');
			var count = iconrowelements.length;

			// close all others
			iconrowelements.removeClass('iconrowaufklapper-elements__open');
			element.addClass('iconrowaufklapper-elements__open');

			// remove old
			element.siblings('.iconrowaufklapper-elements__longtext').remove();

			var idx = parseInt(element.data('index'));
			var text = element.find('p').data('longtext');

			// hinter das letzte 4/5
			if (window.matchMedia('(min-width: 1008px)').matches) {
				idx = count - 1;
			} else {
				// hinter das letzte
				if (idx >= 3) {
					idx = count - 1;
				}
				// hinter das dritte oder
				else {
					idx = 2;
				}
			}
			iconrowelements.eq(idx).after('<div class="iconrowaufklapper-elements__longtext">' + text + '</div>');
		},
	}
});
$(huk.iconrowaufklapper.init);

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	profile: {
		selector: '.picture',
		activeClass: 'personal-profile__person--active',
		spacing: 15,
		scroll: {
			speed: 350
		},
		elements: {
			profile: $('.personal-profile'),
			info: $('.info'),
			pusher: $('.pusher')
		},
		init: function () {
			huk.profile.setNameHeight();
			// bind events
			$(huk.profile.selector).on('click', function () {
				huk.profile.toggleInfo($(this).parent());
			});
			$w.on('resize', huk.profile.responsive);
		},
		getElementRow: function (el) {
			// in welche Zeile des Containers befindet sich das aktuelle Personalprofil?
			// .index() wird mit Selektor aufgerufen, um die zusätzlichen HTML-Elemente des AEM-Authors nicht mitzuzählen
			var $section = $(el).parents('.personal-profile');
			var $personalProfiles = $section.find('.personal-profile__person');
			return Math.ceil(($personalProfiles.index($(el)) + 1) / huk.profile.getRowLength(el));
		},
		getRowLength: function (el) {
			var rowLength;
			var lenFullsize = 4;
			if (el.length > 0) {
				// liest die vom Redakteur vergebene Anzahl Profile pro Zeile aus (falls nicht vorhanden, nehme 4)
				lenFullsize = el.closest(".personal-profile").data('anzahl');
			}
			// Bei Mobil stehen immer 2 Profile pro Zeile, bei Tablet 4, und bei Desktop wird die Anzahl vom Redakteur festgelegt
			if (huk.viewport.breakpoint === 'S') {
				rowLength = 2;
			} else if (huk.viewport.breakpoint === 'M') {
				rowLength = 4;
			} else {
				rowLength = lenFullsize;
			}
			return rowLength;
		},
		responsive: function () {
			var currentProfile = $('.' + huk.profile.activeClass);
			huk.profile.pushNextRow(currentProfile);
			huk.profile.adjustInfoBoxHeight();
			huk.profile.setNameHeight();
		},
		adjustInfoBoxHeight: function () {
			var infoboxCount = huk.profile.elements.info.length;
			for (var i = 0; i < infoboxCount; i++) {
				$(huk.profile.elements.info[i]).css('min-height', $(huk.profile.elements.info[i]).outerHeight());
			}
		},
		toggleInfo: function (el) {
			if (el.hasClass(huk.profile.activeClass)) {
				huk.profile.hideInfobox(el);
			} else {
				huk.profile.showInfobox(el);
			}
		},
		setNameHeight: function () {
			// adjusts name height per row to the highest name element
			var profileCount = huk.profile.elements.profile.length;
			// schleife pro komponente
			for (var i = 0; i < profileCount; i++) {
				var context = $(huk.profile.elements.profile[i]),
					nameEls = $(context).find('.name').css('height', '');

				nameEls.css('height', huk.profile.getHighestHeight(nameEls));
			}
		},
		getHighestHeight: function (elements) {
			var highestHeight = 0,
				elementCount = elements.length;
			// schleife pro element IN DER komponente
			for (var i = 0; i < elementCount; i++) {
				var element = $(elements[i]),
					elementHeight = element.outerHeight();
				if (elementHeight > highestHeight) {
					highestHeight = elementHeight;
				}
			}
			return highestHeight;
		},
		showInfobox: function (el) {
			huk.profile.elements.info.css('margin-top', '');
			huk.profile.elements.pusher.css({
				'height': 0,
				'margin': 0
			});

			$('.' + huk.profile.activeClass).removeClass(huk.profile.activeClass);
			el.addClass(huk.profile.activeClass);

			var info = el.find('.info'),
				row = huk.profile.getElementRow(el),
				rowLength = huk.profile.getRowLength(el),
				pushers = $('.pusher', el);

			info.css('margin-top', -(info.outerHeight() + huk.profile.spacing));
			pushers.css('height', info.outerHeight() + huk.profile.spacing);

			// fixes bug
			$w.trigger('resize');

			$scrollEls.stop().animate({
				scrollTop: el.offset().top - huk.profile.spacing
			}, huk.profile.scroll.speed);

			$w.on('click', function (e) {
				huk.profile.clickWhileOpened(e);
			});
		},
		clickWhileOpened: function (event) {
			var el = $('.' + huk.profile.activeClass);

			if (!el.find($(event.target)).length > 0) {
				huk.profile.hideInfobox(el);
			}
		},
		hideInfobox: function (el) {
			el.removeClass(huk.profile.activeClass);
			huk.profile.elements.info.css('margin-top', '');
			huk.profile.elements.pusher.css({
				'height': 0,
				'margin': 0
			});
		},
		pushNextRow: function (el) {
			var info = $('.info', el),
				row = huk.profile.getElementRow(el),
				rowLength = huk.profile.getRowLength(el),
				allPushers = $('.pusher', $(el).closest('.row')), // pushers in row
				pushers = allPushers.slice(row * rowLength - rowLength, row * rowLength);

			// reset all pushers
			allPushers.css({
				'height': 0,
				'margin': 0
			});
			// add pushers to the current row only
			if (!$(el).hasClass(huk.profile.activeClass)) {
				huk.profile.elements.info.css({
					'margin-top': 0
				});
			} else {
				pushers.css({
					'height': info.outerHeight(),
					'margin-bottom': huk.profile.spacing + 'px'
				});
				info.css('margin-top', -(info.outerHeight() + huk.profile.spacing));
			}
		}
	}
});
$(huk.profile.init);

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	bildgalerie: {
		init: function () {
			var sliderEls = $('.bildgalerie__slider'),
				swiperInstances = {};
			sliderEls.each(function (index, el) {
				swiperInstances[index] = new Swiper(el, {
					slidesPerView: 3,
					nextButton: $(el).find('.bildgalerie__button--next'),
					prevButton: $(el).find('.bildgalerie__button--prev'),
					spaceBetween: 30,
					calculateHeight: true,
					speed: 800,
					loop: false,
					breakpoints: {
						// when window width is <= 600px
						599: {
							slidesPerView: 1
						}
					}
				});
				if ($(el).find('.slide-image-dwnld').length > 0) {
					$(el).addClass('bildgalerie__slider--hasText');
				}
			});
		}
	}
});
$(huk.bildgalerie.init);
var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	imagezoom: {
		visible: false,
		markup: '<div class="imagezoom"><div class="imagezoom__image"><picture class="imagezoom__picture"><img class="imagezoom__image-rsrc"/><span class="imagezoom__close"></span></picture></div></div>',
		handler: $('.textbild__bild[data-zoom="true"], .textbild--zoom .textbild__bild'),
		init: function () {
			$(huk.imagezoom.markup).appendTo(huk.viewport.body).hide();
			huk.imagezoom.handler.on('click', huk.imagezoom.showImage);

			// close on ESC
			$(window).on('esc-key', function () {
				if (huk.imagezoom.visible) {
					huk.imagezoom.hideImage();
				}
			});
		},
		showImage: function () {
			var imageUrl = $(this).find('img').data('zoom-image'),
				imgEl = $('.imagezoom__image-rsrc');

			imgEl.attr('src', imageUrl).on('click', function (e) {
				e.stopPropagation();
			});
			$('.imagezoom').show();
			$('.imagezoom__image, .imagezoom').on('click', huk.imagezoom.hideImage);
			huk.viewport.fix();
			huk.imagezoom.visible = true;
		},
		hideImage: function () {
			$('.imagezoom').hide();
			huk.viewport.unfix();
			huk.imagezoom.visible = false;
		}
	}
});
$(huk.imagezoom.init);
var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	buhne: {
		init: function () {
			huk.buhne.setImageAsBackground();
		},
		setImageAsBackground: function () {
			$('.buhne__img').each(function () {
				var buehnenBild = $(this),
					$src = buehnenBild.attr('data-image-' + huk.viewport.breakpoint + huk.device.retina);

				buehnenBild.parents('.buhne__background').css('background-image', 'url(' + $src + ')');
			});
		}
	}
});
$(huk.buhne.init);

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	buhneVermittler: {
		$loader: $('[data-behave="vm-img-loader"]'),
		$buhne: $('[data-behave="vmbuhne"]'),
		imgLoadedClass: 'buhne--imgLoaded',
		vmHasImgClass: 'buhne--vmHasBgImage',
		vmHasProfileImgClass: 'buhne--vmHasProfileImage',
		vmHasNoProfileImgClass: 'buhne--vmHasNoProfileImage',
		$vmImgPlaceholderEl: $('[data-behave="vm-img-placeholder"]'),
		$vmImgDefaultEl: $('[data-behave="vm-img-default"]'),
		$VmProfileImg: $('[data-behave="vm-img-profil"]'),

		hasVmImage: function () {
			var self = huk.buhneVermittler,
				img = new Image();

			img.onload = function () {
				if (this.width > 3) {
					// VM Bild vorhanden
					self.$buhne.addClass(self.vmHasImgClass);
					self.$vmImgDefaultEl.remove();
				} else {
					// Kein VM-Bild --> nutze Default
					self.$vmImgPlaceholderEl.remove();
				}
				self.$buhne.addClass(self.imgLoadedClass);
				$(huk.buhne.init);
			};
			if (self.$loader.length > 0) {
				img.src = self.$loader.data('src');
			}
		},
		hasVmProfilImage: function () {
			var self = huk.buhneVermittler,
				img = new Image();
			img.onload = function () {
				if (this.width > 1) {
					// VM Profilbild vorhanden
					self.$buhne.addClass(self.vmHasProfileImgClass);
					self.$VmProfileImg.attr('src', self.$VmProfileImg.data('src'));
				} else {
					// Kein VM-Profilbild
					self.$buhne.addClass(self.vmHasNoProfileImgClass);

					// Den Bereich im Navigator löschen, der für das Profilbild reserviert wurde
					var $vmImage = $('.navigator__flyout-vermittler-image').parent();
					$vmImage.siblings('.x9').addClass('col--noml');
					$vmImage.remove();
				}
			};
			if (self.$VmProfileImg.length > 0) {
				var src = self.$VmProfileImg.data('src');
				if (src) {
					img.src = src;
				}
			}
		}
	}
});
$(window).on('load', function () {
	$(huk.buhneVermittler.hasVmImage);
	$(huk.buhneVermittler.hasVmProfilImage);
});

$(document).ready( function() {
	$('.form--simpleform__form').on('submit', function (e) {
		e.preventDefault();
		$(this).find('.submitlink')[0].click();
	});

	$('.form--simpleform__form .submitlink').on('click', function () {
		adjustLink($(this), 'plzort');
	});
});

function adjustLink(link, key) {
	var inputfeld = link.closest('form').find('input[name=' + key + ']');
	if (inputfeld.length === 0) {
		// bei normalen Links (ohne Eingabefeld) keine Anpassung vornehmen
		return;
	}

	var value = inputfeld.val();
	var href = link.attr('href');

	// Ab dem 2. Aufruf muss der vorherige Wert abgeschnitten werden
	href = removeParameterFromUrl(href, key);

	// hänge den aktuellen Wert an (nur wenn der User auch etwas eingegeben hat)
	if (value !== '') {
		href = addParameterToUrl(href, key, value);
	}

	link.attr('href', href);
}

// SUCHE search.js
// GLOBALE VARIABLEN (Initialisierung)
var searchResult = []; // globales Result array
var processedResult = []; // globales überarbeitetes Resulatarray mit itemPerPage Items pro Splice
var currentPage = 1; // Startpage
var maxPages = 5; // maximale Anzahl der Seiten
var itemPerPage = 10; // Anzahl der Ergebnisse pro Seite
var startAutocomplete = 2; // ab wann die Autocompletion startet, 2 wegen kfz
var autocompleteSize = 5; // Anzahl der Suchvorschläge
var searchWord = ''; // globaler Speicher für das Suchwort
var searchCategory = ''; // globaler Speicher für die Katgorie
var searchTotalHits = 0; // Menge an Suchergebnissen für das Tracking
var sonderlockeAsp = "ansprechpartner/suchergebnis";
var isSonderlockeAsp = false;
var vmgsPath = "";

var globalSearchForm = $('#global-search-form');
var searchInput = $('#search-input');

// timer fuer Suggest
var delay = (function () {
    var timer = 0;
    return function (callback, ms) {
        clearTimeout(timer);
        timer = setTimeout(callback, ms);
    };
})();

var urlParam = {

    checkSearchLength: function (location) {
        // überprüft, ob die Länge des Suchbegriffs mindestens
        // startAutocomplete Zeichen lang ist
        var value = '';

        if (location === 'global') {
            value = searchInput.val();
        } else {
            value = location;
        }

        value = searchOperations.cropAllSpaceFromText(value);
        return value.length >= startAutocomplete;
    },
    getUrlParams: function (name) {
        // extrahiert den Suchbegriff aus der URL
        return new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
    },
    setUrlParam: function (name, value) {
        return window.location.href.replace(new RegExp('[\?&]' + name + '=([^&#]*)'), '') + '&' + name + "=" + value;
    },
    deleteUrlParam: function (name) {
        return window.location.href.replace(new RegExp('[\?&]' + name + '=([^&#]*)'), '');
    },
    operateUrlParams: function (name) {
        // trigger für getUrlParams
        var results = this.getUrlParams(name);
        return (results === null) ? null : results[1] || 0;
    },
    proceedAlternateSearch: function (getme) {
        // Suche auf Basis des URL Parameter
        try {
            searchInput.val(decodeURIComponent(getme))
            this.compareUrlAndSearch(getme);
            searchOperations.processSearch();
            huk.search.closeSearchField();
        } catch (e) {
            huk.search.closeSearchField();
        }
    },
    compareUrlAndSearch: function (inputSearch) {
        // Vergleicht und ersetzt im Zweifel den Suchbegriff in der URL
        // durch einen neuen
        var getSearch = urlParam.operateUrlParams('q');
        var trenner = '?';
        if (window.location.href.match(/\?\?q/i)) {
            var myReplace = location.href.replace(/\?\?/, '?');
            window.history.pushState('object as string', 'Title', myReplace);
        }
        if (getSearch !== inputSearch) {
            if (window.location.href.match(/\?+$/i)) {
                // different behaviour Chrome and IE
                trenner = '';
            } else if (!window.location.href.match(/\?/i)) {
                trenner = '?';
            } else if (!window.location.href.match(/\?q/i)) {
                trenner = '&';
            } else {
                trenner = '';
            }

            var newLocation = (getSearch === null) ? location.href + trenner + 'q=' + encodeURIComponent(inputSearch) : location.href.replace(/&?q=([^&]$|[^&]*)/i, trenner + 'q=' + encodeURIComponent(inputSearch));

            window.history.pushState('object as string', 'Title', newLocation);
        }
    },
    storeSearch: function (getme) {
        // speichert den Suchbegriff zwischen
        sessionStorage.setItem('searchQ', getme);
    },
    destroySearch: function () {
        // zerstört die Zwischenspeicherung wieder
        sessionStorage.removeItem('searchQ');
    }
};

// Suchergebnisse + Autocomplete
var searchOperations = {
    searchForm: globalSearchForm,
    searchContainer: $('#searchContainer'),
    errorContainer: $('#errorContainer'),
    spellcheckContainer: $('#spellcheckContainer'),

    init: function () {
        this.clearSearchContainer();
    },

    // entfernt checkServerResponse!
    getSearch: function () {
        // extrahiert das Suchwort aus dem navigations Inputfeld
        searchWord = searchInput.val();
        searchWord = this.replaceCheck(searchWord);
        searchWord = this.cropSpaceFromText(searchWord);
        return searchWord;
    },
    getSearchCounter: function () {
        // evaluiert die Länge des Suchworts
        var counter = this.getSearch();
        if (counter != null && counter != undefined && counter.length > 0) {
            return counter.length;
        } else return 0;
    },
    cropSpaceFromText: function (data) {
        // reduziert die Anzahl der Leerzeichen auf
        if (data != undefined && data != null && data != '') {
            var txt = data.replace(/\s\s+/g, ' ');
            return this.stringTrim(txt);
        }
    },
    cropAllSpaceFromText: function (data) {
        // löscht alle Leerzeichen
        var txt = data.replace(/\s\s+/g, '');
        txt = txt.replace(/ /g, '');
        return this.stringTrim(txt);
    },
    stringTrim: function (data) {
        // löscht die Leerzeichen vor und nach dem Suchwort
        return data.replace(/^\s+|\s+$/gm, '');
    },
    replaceCheck: function (data) {
        if (data != undefined && data != null && data != '') {
            // nur erlaubt Zeichen Sonderzeichen: -
            return data.replace(/[^0-9a-zA-Z-\u00c4\u00e4\u00d6\u00f6\u00dc\u00fc\u00df ]/gi, ' ');
        }
    },
    getUrl: function () {
        return '/search/api';
    },
    processSearch: async function () {
        var self = this;

        pagination.deletePagination();
        searchInput.val(this.getSearch());

        try {
            const result = await searchOperations.fetchSearchResults(this.getSearch(), itemPerPage, 0, searchCategory);
            self.clearSearchContainer();
            self.clearSearchResults();
            searchResult = result;
            searchTotalHits = result['numFound'];
            self.processPageContent();
        } catch (e) {
            self.showErrorContainer();
        }
    },
    fetchSearchResults: async function (query, rows, start, category) {
        const url = `${searchOperations.getUrl()}/search`;
        const response = await fetch(url, {
            method: "POST",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                ...{
                    query,
                    rows,
                    start
                },
                ...category && {category}
            })
        });
        return await response.json();
    },
    showErrorContainer: function () {
        // trigger für den Fehlercontainer
        this.searchContainer.addClass('hidden');
        this.spellcheckContainer.addClass('hidden');
        this.errorContainer.removeClass('hidden');
        searchTracking();
    },
    showSearchContainer: function () {
        // trigger für den Container der Suchergebnisse
        this.errorContainer.addClass('hidden');
        this.spellcheckContainer.addClass('hidden');
        this.searchContainer.removeClass('hidden');
    },
    clearSearchContainer: function () {
        // leert den Suchcontainer
        this.searchContainer.empty();
        $("#spellcheck").empty();
        $("#numFound").empty();
        $('.search_category').removeClass("search_category_active");
        $("#search_category_hits_alle").text(0);
        $("#search_category_hits_produkt").text(0);
        $("#search_category_hits_ratgeber").text(0);
        $("#search_category_hits_faq").text(0);
        $("#search_category_hits_sonstige").text(0);
        $("#search_categories").hide();

    },
    clearSearchResults: function () {
        // setzt die Suche zurück
        searchResult = [];
        processedResult = [];
        maxPages = 5;
        currentPage = 1;
        searchTotalHits = 0;
    },
    compareUrlAndSearch: function () {
        // Vergleich und eventuelles Ersetzten des URL Parameters
        var getSearch = urlParam.operateUrlParams('q');
        var inputSearch = encodeURIComponent(this.getSearch()); // wegen Umlauten
        var trenner = '?';

        if (window.location.href.match(/\?\?q/i)) {
            var myReplace = location.href.replace(/\?\?/, '?');
            window.history.pushState('object as string', 'Title', myReplace);
        }

        if (getSearch !== inputSearch) {
            if (window.location.href.match(/\?+$/i)) {
                // different behaviour Chrome and IE
                trenner = '';
            } else if (!window.location.href.match(/\?/i)) {
                trenner = '?';
            } else if (!window.location.href.match(/\?q/i)) {
                trenner = '&';
            } else {
                trenner = '';
            }

            var newLocation = (getSearch === null) ? location.href + trenner + 'q=' + inputSearch : location.href.replace(/&?q=([^&]$|[^&]*)/i, trenner + 'q=' + inputSearch);

            window.history.pushState('object as string', 'Title', newLocation);
        }
    },
    checkAutocomplete: function () {
        // feuert das Autocomplete
        if (this.getSearchCounter() >= startAutocomplete) {
            this.processAutocomplete();
        }
    },

    updateResultCount: function (searchResultObject) {
        var ergebnisse = (searchTotalHits === 1) ? ' Ergebnis' : ' Ergebnisse';
        var searchTerm = searchResultObject['query'];

        // if term was corrected, then it is used instead of typed searchterm
        if (searchResultObject.correctlySpelled !== true) {
            if (searchResultObject.spellcheckCorrection !== null) {
                searchTerm = searchResultObject['spellcheckCorrection'];
            }
        }
        $('#numFound').html(searchTotalHits + ergebnisse + ' für <b>„' + searchTerm + '“</b>');
    },
    updateCategories: function () {

        var categories = ["produkt", "ratgeber", "faq", "sonstige"];

        // reset categories
        $("#search_categories").show();
        $('.search_category').removeClass('search_category_active').removeClass("search_category_empty");


        if (empty(searchResult['searchCategory'])) {
            $('#search_category_alle').addClass("search_category_active");
        }

        // set hits per category
        var categoryHits = searchResult['categories'];
        if (!empty(categoryHits) && !jQuery.isEmptyObject(categoryHits)) {

            for (var i = 0; i < categories.length; i++) {
                var c = categories[i];
                var hitsForCategory = categoryHits[c];
                var categorySpan = $('#search_category_hits_' + c);
                // if category key is not present in object,
                // this category is empty
                if (typeof hitsForCategory === 'undefined') {
                    hitsForCategory = 0;
                    categorySpan.parent().addClass("search_category_empty");
                }
                categorySpan.text(hitsForCategory);

                if (searchResult['searchCategory'] === c) {
                    categorySpan.parent().addClass("search_category_active");
                    // todo: was ist das? das muss wieder rein!
                    pagingResults = hitsForCategory;
                }
            }
        } else if (jQuery.isEmptyObject(categoryHits)) {
            // if categories is an empty object
            // search is with zero results
            // deactivate all
            $('.search_category').removeClass('search_category_active').addClass("search_category_empty");
        }
        // insg suchtreffer in kategorie "alle"
        $('#search_category_hits_alle').text(searchTotalHits);

    },
    processPageContent: function () {
        var self = this;
        self.clearSearchContainer();

        // result COUNT will be shown always
        var query = searchResult['query'];
        self.updateResultCount(searchResult);


        // do category rendering
        self.updateCategories();

        // füllt den Suchcontainer mit den Ergebnissen
        if (searchTotalHits === 0 && (empty(searchResult['contact']) || !(typeof searchResult['contact'] === 'object'))) {
            // erstmal replace dingsbums
            // errorContainer__word
            searchOperations.errorContainer.find('.errorContainer__word').text(query);
            self.showErrorContainer();
        } else {
            // add contact result
            if (!empty(searchResult['contact']) && (typeof searchResult['contact'] === 'object') && empty(searchResult['searchCategory'])) {
                var html = jsonToHtml(searchResult['contact']);
                self.searchContainer.append(html);
            }

            // hits erhoehen bei Sonderlocke Ansprechpartnersuche:
            if (isSonderlockeAsp) {
                searchTotalHits += 1;
            }


            // add search results
            var noFaqContainer = true;
            $.each(searchResult['documents'], function (key, val) {
                if (!empty(val['searchCategory']) && val['searchCategory'] == 'faq') {
                    if (noFaqContainer) {
                        self.searchContainer.append(faqContainer());
                        noFaqContainer = false;
                    }
                    // faq = true;
                    $('#faqs').append(faqItem(val));
                } else {
                    var html = jsonToHtml(val);
                    self.searchContainer.append(html);
                }
            });
            textManipulation.correctInternalLinksInFaqs();

            var pagingResults = searchTotalHits;

            // if a category is selected
            // result count must be updated
            if (!empty(searchResult['searchCategory']) && !jQuery.isEmptyObject(searchResult.categories)) {
                var selectedCat = searchResult['searchCategory'];
                pagingResults = searchResult.categories[selectedCat];
            }
            pagination.createPagination(pagingResults, searchResult['searchCategory']);
            self.showSearchContainer();

            searchTracking();
        }
    },
    processAutocomplete: function () {
        searchInput.catcomplete({
            delay: 0,
            minLength: startAutocomplete,
            source: async function (request, complResponse) {
                let req = request.term;
                req = searchOperations.replaceCheck(req);
                req = searchOperations.cropAllSpaceFromText(req);

                const url = `${searchOperations.getUrl()}/suggest?q=${req}&size=${autocompleteSize}`;
                const response = await fetch(url, {
                    credentials: "include"
                });
                const result = await response.json();
                complResponse(result);
            },
            select: function (event, ui) {
                if (ui.item.link != null) {
                    window.location.href = ui.item.link;
                } else {
                    window.location.href = vmgsPath + "/suchergebnisse.html?q=" + encodeURI(ui.item.value);
                }
            }
        }).data("custom-catcomplete")._renderItem = function (ul, item) {
            return $("<li></li>").data("item.autocomplete", item).append("<div>" + item.label + "</div>").appendTo(ul);
        };
    }
};


// PAGINATION

var pagination = {

    more: async function (e) {
        let start, rows, total = 0;
        try {
            start = parseInt(e.target.dataset.start);
            rows = parseInt(e.target.dataset.rows);
            total = parseInt(e.target.dataset.results);
        } catch (e) {
        }
        try {
            const result = await searchOperations.fetchSearchResults(searchOperations.getSearch(), rows, start, e.target.dataset.category);
            $.each(result.documents, function (index, doc) {
                if (!empty(doc['searchCategory']) && doc['searchCategory'] === 'faq') {
                    $("#searchContainer").append(faqItem(doc))
                } else {
                    var html = jsonToHtml(doc);
                    $("#searchContainer").append(html);
                }
            });

            const nextStart = start + rows;
            if (nextStart >= total) {
                $(e.target.parentNode).hide();
            } else {
                $(e.target).attr('data-start', nextStart);
            }
        } catch (e) {
            searchOperations.showErrorContainer();
        }
    },


    paginationHolder: $('#paginationHolder'),

    init: function () {
        // löscht die Pagination
        this.paginationHolder.empty();
    },
    createPagination: function (results, category) {
        if (results > 10) {
            // Trigger für das HTML der Paginierung
            this.paginationHtml(results, category);
        }
    },
    deletePagination: function () {
        // löscht und versteckt die Paginierung
        this.paginationHolder.empty();
        this.paginationHolder.addClass('hidden');
    },
    paginationHtml: function (results, category) {
        var datacategory = '';
        if (!empty(category)) {
            datacategory = 'data-category="' + category + '"';
        }
        var html = '<div id="more" class="more" data-start="' + itemPerPage + '" data-rows="' + itemPerPage + '" data-results="' + results + '" ' + datacategory + '>Mehr anzeigen</div>';
        this.paginationHolder.html(html);
        this.paginationHolder.removeClass('hidden');
    }
};

// Textmanipulationen
var textManipulation = {
    evaluateGsVmPath: function () {
        // addiert vm/gs Parameter in den Linkpfad
        var urlPath = location.pathname.split('/');
        var myAddPath = '';
        var ident = urlPath[1].toLowerCase();

        if (ident === 'gs' || ident === 'vm') {
            myAddPath = urlPath[1] + '/' + urlPath[2] + '/';
        }
        return myAddPath;
    },
    createFaqLink: function (url) {
        // spezielles Verfahren bei FAQ Links mit Anker
        // url = 'https://www.huk.de/haus-haftung-recht/haftpflichtversicherung/private-haftpflichtversicherung.html#wer';
        // url aufbereiten:
        url = url.replace(/.html/gi, "");
        url = url.replace('https://www.huk.de', "");

        var anker = "";
        var ankerpos = 250;

        if (url.lastIndexOf('#') != -1) {
            ankerpos = url.lastIndexOf("#");
            anker = url.substr(ankerpos);
            url = url.substring(0, ankerpos);
        }
        var tmpFaqPath = url;
        var parser = location;
        var myAddPath = this.evaluateGsVmPath();
        var link = parser.origin;
        if (myAddPath != '' && myAddPath.length > 2) {
            // vmgs Pfad existiert
            link += '/' + myAddPath;
            if (link.lastIndexOf('/') != -1) {
                var spos = link.lastIndexOf("/");
                link = link.substring(0, spos);
            }
        }
        link += tmpFaqPath;
        link += ".html";
        link += anker;
        return link;
    },
    createLinkFromPath: function (path) {
        // erzeugt den optischen Linkpfad auf der Ergebnisseite
        // PHIL-SUCHE!
        if (path.match(/\.do/)) {
            link = path;
            return link;
        } else {
            // Standard-Verfahren
            var tmpPath = path.split('/');
            var parser = location;
            var myAddPath = this.evaluateGsVmPath();
            var link = parser.origin + '/' + myAddPath;
            for (var i = 4; i < tmpPath.length; i++) {
                var add = (i === (tmpPath.length - 1)) ? '.html' : '/';
                link += tmpPath[i] + add;
            }
            if (path.indexOf(sonderlockeAsp) > 1) {
                if (link.lastIndexOf('.html') != -1) {
                    link = link.replace('.html', '');
                }
                link = link.replace(sonderlockeAsp, sonderlockeAsp + '.html');
            }
            return link;
        }
    },
    createRealLinkFromPath: function (path) {
        // PHIL-SUCHE!
        if (path.match(/\.do/)) {
            link = path;
            return link;
        } else {
            // erzeugt den tatsächlichen Link
            var parser = location, link;

            if (path.indexOf(sonderlockeAsp) > 1) {
                //do nothing
                link = this.createLinkFromPath(path);
                isSonderlockeAsp = true;
            } else {
                if (parser.hostname === 'localhost') {
                    link = path + '.html';
                } else {
                    link = this.createLinkFromPath(path);
                }
                //link += parser.search; // wegen Umlauten frueher encodeURI(parser.search);
            }
            return link;
        }
    },
    //	korrigiert Links auf interne Seiten im FAQ-Content:
    //	- löscht unnötigen AEM-Pfad
    //	- respektiert VMGS-Kontext
    correctInternalLinksInFaqs: function () {
        $("#faqs a").each(function () {
            var href = $(this).attr("href");
            // behandle nur interne URL's (die mit / beginnen)
            if (href.indexOf("/") == 0) {
                href = href.replace("/content/hukde/webcontent", "");
                // respektiere vmgsPath, aber nicht dpppelt einfügen
                if (href.indexOf(vmgsPath) != 0) {
                    href = vmgsPath + href;
                }
                $(this).attr("href", href);
            }
        });
    }
};


function getTitleFromResult(jsonObj) {
    var title = "";
    if (!empty(jsonObj['searchHeadline'])) {
        title = jsonObj['searchHeadline'];
    } else if (!empty(jsonObj['seoPageTitle'])) {
        title = jsonObj['seoPageTitle'];
    } else {
        title = jsonObj['title'];
    }
    return title;
}

function getDescriptionFromResult(jsonObj) {
    var description = "";
    if (!empty(jsonObj['highlighting'])) {
        description = jsonObj['highlighting'];
    } else if (!empty(jsonObj['searchExcerpt'])) {
        description = jsonObj['searchExcerpt'];
    } else if (!empty(jsonObj['description'])) {
        description = jsonObj['description'];
    }
    return description;
}

function getElementFromResult(name, jsonObj) {
    var text = "";
    if (!empty(jsonObj[name])) {
        text = jsonObj[name];
    }
    return text;
}


// Darstellung der Suchergebnisse
function jsonToHtml(data) {
    var link = textManipulation.createLinkFromPath(data['path']),
        title = getTitleFromResult(data),
        breadcrumbs = getElementFromResult('breadcrumbs', data),
        description = getDescriptionFromResult(data),
        href = textManipulation.createRealLinkFromPath(data['path']),
        html;

    // @formatter:off
	html = '<li class="suchergebniselement">';
	html += '<div class="suchergebniselement__path">' + breadcrumbs + '</div>';
	html += '<a underline="always" href="' + href + '" class="suchergebniselement__link suchergebniselement__title" title="">';
	// html += '<span class="suchergebniselement__title link link--standalone">' + title + '</span>';
	html += '<b>' + title + '</b>';
	html += '</a>';
	html += '<span class="suchergebniselement__desc">' + description + '</span>';
	html += '</li>';
	// @formatter:on

    return html;
}

function faqContainer() {
    return '<s-expansion-panels id="faqs" multiple="true" itemscope itemtype="https://schema.org/FAQPage"> </s-expansion-panels>';
}

function faqItem(data) {
    var question = data['title'];
    var answer = data['html'];
    var url = data['url'];
    url = textManipulation.createFaqLink(url); //wegen VMGS Kontext
    var pageTitle = data['searchHeadline'];
    if (empty(pageTitle)) {
        pageTitle = url;
    }
    var breadcrumbs = getElementFromResult('breadcrumbs', data);

    return '<s-expansion-panel divider="true"  itemtype="https://schema.org/Question" itemprop="mainEntity">\n' +
        '<div class="s:text-h5 s:text-regular" slot="headline">\n' +
        '    <div>' + question +
        '    </div>\n' +
        '</div>\n' +
        '<div slot="content">\n' +
        '  <div class="s:text-hyphens s:prose s:marker-bullet" itemprop="text">' + answer.replaceAll("<a", "<a underline='always'") + '</div>\n' +
        '<br><div class="suchergebniselement__path">' + breadcrumbs + '</div>' +
        '<a  href="' + url + '">' + pageTitle + '</a>' +
        '</div>\n' +
        '</s-expansion-panel>';
}

// tracking in suche
function searchTracking() {
    if (typeof window.hde !== 'undefined' && window.hde !== null) {
        window.hde.search = {};
        window.hde.search.type = 'standard';
        window.hde.search.keyword = decodeURIComponent(urlParam.operateUrlParams('q'));
        window.hde.search.results = searchTotalHits;
        // console.info("Anzahl Suchergebnisse: " + searchTotalHits);
        window.hde.page.numb = "1";
        // Anpassung PageName fuer profondo
        if (parseInt(window.hde.search.results) > 0) {
            window.hde.page.pagepath = 'Suchergebnisse_mit_Treffern';
            window.hde.page.numb = "1";
        } else {
            window.hde.page.pagepath = 'Suchergebnisse_ohne_Treffer';
            window.hde.page.numb = '0';
        }
        //Ausloesen Messung
        if (typeof _satellite !== 'undefined' && _satellite !== null
            && typeof _satellite.track !== 'undefined' && _satellite.track !== null) {
            _satellite.track('trackSearch');
        }
    }
}

function empty(e) {
    switch (e) {
        case "":
        case null:
        case 0:
        case "0":
        case false:
        case typeof (e) == "undefined":
            return true;
        default:
            return false;
    }
}

// liest den aktuellen VMGS-Path aus einer Variablen aus, die vom Websphere zur Laufzeit gefüllt wird.
// Die Abfrage auf $ schließt die Fälle aus, wenn das AEM ohne vorgeschalteten Websphere aufgeruƒen wird.
function setVmgsPath() {
    if (huk && huk.vmgsPath && huk.vmgsPath.indexOf("$") == -1) {
        vmgsPath = huk.vmgsPath;
    }
}

$(document).ready(function () {
    // checkt ob der Server bereit für die Suche ist
    // entfernt ! searchOperations.checkServerResponse();

    // onload check if GET q= search-Parameter is set
    var getme = urlParam.operateUrlParams('q');

    if (typeof getme !== 'undefined' && getme !== 'undefined' && getme !== null && getme !== '') {
        try {
            getme = decodeURIComponent(getme);
            // nicht erlaubte Zeichen ausschliessen;
            getme = searchOperations.replaceCheck(getme);
            getme = searchOperations.cropSpaceFromText(getme);
        } catch (e) {
            getme = getme;
        }
    }

    if (window.location.pathname.match(/suchergebnisse/)) {
        if (typeof getme !== 'undefined' && getme !== null && getme !== '' && urlParam.checkSearchLength(getme)) {
            urlParam.proceedAlternateSearch(getme);
        } else {
            getme = sessionStorage.getItem('searchQ');
            if (typeof getme !== 'undefined' && getme !== null && getme !== '' && urlParam.checkSearchLength(getme)) {
                urlParam.compareUrlAndSearch(getme);
                urlParam.proceedAlternateSearch(getme);
                urlParam.destroySearch();
            }
        }
    } else {
        if (typeof getme !== 'undefined' && getme !== null && getme !== '' && urlParam.checkSearchLength(getme)) {
            // console.info('Achtung: getme:',decodeURIComponent(getme));
            searchWord = decodeURIComponent(getme);

        }
    }

    // trigger für autocomplete normales Suchfeld
    $(document).on('keyup', '#search-input', function (e) {
        if (e.keyCode !== 0 || e.keyCode !== 32) {
            searchOperations.checkAutocomplete();
        }
    });

    globalSearchForm.on('submit', function (event) {
        event.preventDefault();
        if (urlParam.checkSearchLength('global')) {
            searchCategory = '';
            searchOperations.compareUrlAndSearch();
            searchOperations.processSearch();
        }
    });

    // trigger für paging
    $(document).on('click', '#more', function (e) {
        pagination.more(e);
    });

    // set search category
    $(document).on('click', '.search_category', function (e) {
        e.preventDefault();
        searchCategory = e.currentTarget.dataset.category;
        // perform click when category is not empty
        if (!$(this).hasClass('search_category_empty')) {
            searchOperations.processSearch();
        }
        return false;
    });

    $.widget("custom.catcomplete", $.ui.autocomplete, {
        _create: function () {
            this._super();
            this.widget().menu("option", "items", "> :not(.ui-autocomplete-category)");
        },
        _renderMenu: function (ul, items) {
            var that = this,
                currentCategory = "";
            $.each(items, function (index, item) {
                var li = that._renderItemData(ul, item);
                if (item.category) {
                    li.attr("aria-label", item.category + " : " + item.label);
                }
            });
        }
    });

    searchOperations.init();
    pagination.init();
    setVmgsPath();
});
var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	search: {
		overlay: $('.search-click-overlay'),
		searchBtn: $('.button--search'),
		header: $('.header'),
		hamburger: $('.hamburger'),
		wrap: $('.header-search__wrapper'),
		navi: $('.navigation'),
		suggest: $('.suggest'),
		contextEl: null,
		getOpenFlyout: false,
		init: function () {
			huk.search.bindEvents();
		},
		bindEvents: function () {
			// TOGGLE
			huk.search.searchBtn.on('click', function (e) {
				e.preventDefault();
				e.stopPropagation();
				huk.search.contextEl = $(this).parent();
				if (huk.search.getOpenFlyout) {
					huk.search.closeSearchField();
				} else {
					huk.search.openSearchField();
				}
			});
			// close on ESC
			$w.on('esc-key', function () {
				if (huk.search.getOpenFlyout) {
					huk.search.closeSearchField();
				}
			});
			// close on click
			$w.on('click touchstart', function (e) {
				var el = $('.header-search'),
					childClicked = el.find($(e.target)).length > 0;
				if (!childClicked && huk.search.getOpenFlyout) {
					huk.search.closeSearchField();
				}
			});
		},
		hideWrap: function () {
			huk.search.wrap.fadeOut('fast');
		},
		openSearchField: function () {
			huk.search.getOpenFlyout = true;

			// navigaton schliessen und navi-overlay ausblenden
			huk.navigation.close();

			huk.search.searchBtn.addClass('button--searchActive');
			huk.search.header.addClass('header--searchActive');
			huk.search.hamburger.removeClass('js-active hamburger--active');
			huk.search.navi.fadeOut('fast'); // fixme: move to navi
			huk.search.wrap.fadeIn('fast', function () {
				$('.q', huk.search.contextEl).focus();
			});
			huk.search.suggest.hide();

		},
		closeSearchField: function () {
			huk.search.getOpenFlyout = false;
			huk.search.navi.fadeIn('fast'); // fixme: move to navi
			huk.search.hideWrap();
			huk.search.header.removeClass('header--searchActive');
			huk.search.searchBtn.removeClass('button--searchActive');
		}
	}
});
$(huk.search.init);

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	anchorscroll: {
		$elements: null,
		hashInUrl: window.location.hash,
		init: function () {

			// getting the list of all links on the page starting with #, binding the event to them.
			// additionally, if the URL contains an anchor to an accordion then open it.
			// (the scrolling itself to the anchor target is done by css/browser)
			$(window).on('load', function () {
				// Timeout is required to give shield components enough time to render completely
				setTimeout(function(){
					// get page internal anchor links and bind events on them
					huk.anchorscroll.$elements = $('[href^="#"][href!="#"]');
					huk.anchorscroll.bindEvent();

					// if the URL contains the hash and target is an accordion, then open it
					if (huk.anchorscroll.hashInUrl) {
						var el = document.getElementById(huk.anchorscroll.hashInUrl.substring(1)); // # entfernen
						if (el &&  huk.aufklapper.getShieldAccordionBelongingToAnchor($(el))) {
							huk.aufklapper.openAccordionBelongingToAnchor($(el));
						}
					}
				}, 500);
			});
		},

		// if a page internal link is clicked and the target is an accordion, then open it
		// (the scrolling itself to the anchor target is done by css/browser)
		bindEvent: function () {
			huk.anchorscroll.$elements.each(function () {
				var $element = $(this),
					$target = $(this.hash);
				if ($target.length > 0 && huk.aufklapper.getShieldAccordionBelongingToAnchor($target)) {
					$element.on('click', function () {
						huk.aufklapper.openAccordionBelongingToAnchor($target);
					});
				}
			});
		}
	}
});
$(huk.anchorscroll.init);

// trustpilotAPIBaseURL variable kommt aus entsprechnde Modelle bzw Komponente
var huk;
if (!huk) {
    huk = {};
}

$.extend(huk, {
    trustpilot: {
        element: $('.trustpilot'),
        elements: {
            total: $('.trustpilot__totalratings'),
            score: $('.trustpilot__trustscore')
        },
        url: window.huk?.trustpilotAPIBaseURL + '/v1/business-units/4bed5d3f00006400050b8744?apikey=04BFgdJenG5usSgGG6zJBenzkZTcFI0p',
        data: {},
        init: function () {
            if (huk.trustpilot.element.length > 0) {
                huk.trustpilot.getData();
            }
        },
        getData: function () {
            $.ajax({
                url: huk.trustpilot.url,
                dataType: 'JSON'
            }).done(function (data) {
                if (huk.trustpilot.isValid(data)) {
                    huk.trustpilot.drawWidget();
                } else {
                    huk.trustpilot.element.hide();
                }
            });
        },
        isValid: function (data) {
            var validCount = 0;
            if (!isNaN(data.score.trustScore) && data.score.trustScore <= 10 && data.score.trustScore >= 0) {
                huk.trustpilot.data.score = data.score.trustScore.toPrecision(2).replace('.', ',');
                validCount++;
            }
            if (!isNaN(data.score.stars) && data.score.stars <= 5 && data.score.stars >= 0) {
                huk.trustpilot.data.stars = parseInt(data.score.stars, 10);
                validCount++;
            }
            if (!isNaN(data.numberOfReviews.total) && data.numberOfReviews.total <= 1000000 && data.numberOfReviews.total > 0) {
                huk.trustpilot.data.totalRatings = data.numberOfReviews.total;
                validCount++;
            }
            return (validCount === 3);
        },
        drawWidget: function () {
            huk.trustpilot.drawStars();
            huk.trustpilot.elements.total.text(huk.trustpilot.data.totalRatings);
            huk.trustpilot.elements.score.text(huk.trustpilot.data.score);
        },
        drawStars: function () {
            var count = huk.trustpilot.data.stars,
                trustpilot_container = $('.trustpilot__star-container');
            trustpilot_container.each(function () {
                var els = $(this).children();
                for (var i = 0; i < count; i++) {
                    els.eq(i).addClass('trustpilot__star--filled-' + count);
                }
            })

        }
    }
});
$(huk.trustpilot.init);

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk,
	{
		modal: {
			init: function () {
				$(document).on('keyup', function (e) {
					if (e.keyCode === 27) { // escape key maps to keycode `27`
						for (var i = 0; i < huk.modal._modals.length; i++) {
							huk.modal.close(huk.modal._modals[i]);
						}
					}
				});
			},
			open: function (id) {
				this._modals.push(id);
				$('#' + id).show();
				huk.viewport.fix();
			},
			close: function (id) {
				this._modals.splice(this._modals.indexOf(id), 1);
				$('#' + id).hide();
				huk.viewport.unfix();
			},
			_modals: []
		}
	}
);

$(huk.modal.init);

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	navigatorSchaden: {
		maxLevel: 3,
		button: $('.navigator__button-schadenmelden'),
		selects: $('[data-behave="schadenselect"]'),
		elements: $('[data-visible-for]'),
		selected: [],
		init: function () {
			huk.navigatorSchaden.bindEvents();
			huk.navigatorSchaden.hideButton();
			huk.navigatorSchaden.hideNextLevels(1);
			huk.navigatorSchaden.toggleElements();
		},
		bindEvents: function () {
			huk.navigatorSchaden.selects.on('change', function (event) {
				event.preventDefault();
				huk.navigatorSchaden.handleSelection($(this));
			});
			$(document).on('schaden-selection-complete', function (event, data) {
				huk.navigatorSchaden.selectionComplete(data);
			});
			$(document).on('schaden-selection-incomplete', function (event, data) {
				huk.navigatorSchaden.selectionIncomplete(data);
			});
		},
		showButton: function (href) {
			huk.navigatorSchaden.button.attr('href', href).show();
		},
		hideButton: function () {
			huk.navigatorSchaden.button.hide();
		},
		hideNextLevels: function (level) {
			do {
				level++;
				$('[data-level="' + (level) + '"]').parent().hide();
			} while (level < huk.navigatorSchaden.maxLevel);
		},
		showNextLevel: function (level) {
			var levelSelects = $('[data-level]');
			levelSelects.parent().hide();
			levelSelects.filter(function () {
				return $(this).data('level') <= (level + 1);
			}).parent().show();
		},
		selectionComplete: function (selected) {
			huk.navigatorSchaden.hideNextLevels(selected.level);
			huk.navigatorSchaden.toggleElements();
			if (!huk.navigatorSchaden.isArk(selected.key)) {
				// button einblenden + link aendern
				huk.navigatorSchaden.showButton(selected.val)
			}
		},
		selectionIncomplete: function (selected) {
			huk.navigatorSchaden.showNextLevel(selected.level);
			huk.navigatorSchaden.toggleElements();
			huk.navigatorSchaden.filterOptions(selected);
			huk.navigatorSchaden.hideButton();
		},
		filterOptions: function (selected) {
			var select = $('[data-level="' + (selected.level + 1) + '"]');
			// select first option (bitte waehlen)
			select.find('option:disabled').prop('disabled', false).prop('selected', 'selected').prop('disabled', 'disabled');
			// span wrappen ist leider eine spezialloesung für IE11+Safari
			select.find('span').each(function () {
				$(this).children().unwrap();
			});
			select.find('option').not(':disabled').show().filter(function () {
				return $(this).data('valid-for') !== selected.key;
			}).wrap('<span style="display: none;"></span>');
		},
		hasSubElements: function (key) {
			// todo: better selector
			return $('[data-valid-for="' + key + '"]').length > 0;
		},
		isArk: function (key) {
			return key === 'ark';
		},
		saveSelection: function (selected) {
			var selectedInArrayIndex = (selected.level-1),
				index = (huk.navigatorSchaden.maxLevel-1);

			for (; index >= selectedInArrayIndex; index--) {
				// when level is changed, delete saved selections with index greater than level
				if (typeof huk.navigatorSchaden.selected[index] !== 'undefined') {
					huk.navigatorSchaden.selected.splice((index), 1);
				}
			}
			// store NEW selected key
			huk.navigatorSchaden.selected[selectedInArrayIndex] = selected.key;
		},
		handleSelection: function (changedElement) {
			var key = changedElement.find('option:selected').data('key'),
				selected = {
					val: changedElement.val(),
					level: changedElement.data('level'),
					key: (typeof key === 'undefined') ? '' : key.toLowerCase()
				};
			huk.navigatorSchaden.saveSelection(selected);

			if (huk.navigatorSchaden.hasSubElements(selected.key)) {
				// resette folgende selects, erstecke invalide options, enable valid options
				$(document).trigger('schaden-selection-incomplete', [selected]);
			} else {
				// wenn keine subelemente vorhanden, alle nachfolgenden selects hiden
				// on selection complete show button, add href and toggle visibilty of other elements
				$(document).trigger('schaden-selection-complete', [selected]);
			}
		},
		toggleElements: function () {
			// erstmal hide alles
			huk.navigatorSchaden.elements.hide();
			huk.navigatorSchaden.elements.filter(function () {
				var cond = false;
				if ($(this).data('visible-for') === 'all') {
					cond = true;
				} else {
					var visibleForArray = $(this).data('visible-for').split(',');
					for (var i = 0; i < visibleForArray.length; i++) {
						if (huk.navigatorSchaden.selected.indexOf(visibleForArray[i]) !== -1) {
							cond = true;
							break;
						}
					}
				}
				return cond;
			}).show();
		}
	}
});
$(huk.navigatorSchaden.init);

var huk;
if (!huk) {
	huk = {};
}
$.extend(huk, {
	mapCommon: {
		iconPath: '/etc/designs/hukde/img/googlemaps/',
		zoomedIn: 14,
		maps: {}, // dieses objekt enthaelt spaeter die erzeugten karten
		options: {
			disableDefaultUI: false,
			mapTypeId: 'roadmap',
			center: {
				// deutschland
				lat: 51.165691,
				lng: 10.451526
			},
			zoomControl: true,
			mapTypeControl: true,
			scaleControl: false,
			streetViewControl: true,
			rotateControl: false,
			fullscreenControl: false
		},
		init: function () {
			huk.mapCommon.bindEvents();

			// API laden wenn angefordert
			$(document).on('click', '.loadGoogleMapsApi', function (e) {
				e.preventDefault();
				$('.loadGoogleMapsApi').remove();
				huk.mapCommon.getApi();
			});
		},
		initNewMap: function (mapBezeichner, targetElement, result) {
			if (typeof google !== 'undefined') {
				// initialize new map, create new map storage object and save new created object to global maps storage
				$.extend(
					huk.mapCommon.maps,
					huk.mapCommon.getNewMapStorage(mapBezeichner, targetElement, result)
				);
				// rendert die Karte mit dem Result
				huk.mapCommon.renderMap(mapBezeichner);
			} else {
				// map initialisieren sobald googlemaps geladen ist
				// neu aufgrund von getapi bei onload
				$(window).on('gmaps-loaded', function () {
					huk.mapCommon.initNewMap(mapBezeichner, targetElement, result);
				});
			}
		},
		initMaps: function () {
			$(window).trigger('gmaps-loaded');
		},
		bindEvents: function () {
			// flyout geoeffnet
			$(window).on('flyout-opened', function (e, mapBezeichner) {
				if (huk.mapCommon.isValidMap(mapBezeichner)) {
					huk.mapCommon.reDrawMap(mapBezeichner);
				}
			});
			// karte resetted
			$(window).on('map-resetted', function (e, mapBezeichner) {
				if (mapBezeichner !== 'sas-komp') {
					huk.vmsucheCommon.resetVmResultlist(mapBezeichner);
				}
			});

			// links originalkarte
			$(document).on('click', '.link--originalkarte', function (e) {
				e.preventDefault();
				var mapBezeichner = huk.vmsucheCommon.getMapBezeichnerFromDomElement($(this));
				huk.mapCommon.showOriginalkarte(mapBezeichner);
				huk.mapCommon.originalkarteLink.hide(mapBezeichner);
			});
		},
		getApi: function () {
			if (!huk.gmk) {
				// Der Key muss vorhanden sein, sonst funktioniert Google Maps nicht
				return;
			}
			return $.getScript('//www.google.com/jsapi', function () {
				google.load('maps', '3', {
					other_params: 'key=' + huk.gmk,
					callback: huk.mapCommon.initMaps
				});
			});
		},
		getNewMapStorage: function (mapBezeichner, targetElement, result) {
			var obj = {};
			obj[mapBezeichner] = {
				'mapname': mapBezeichner,
				'bounds': new google.maps.LatLngBounds(), // leeres bounds-Objekt
				'containerElement': targetElement,
				'modifieable': true,
				'mapInstance': new google.maps.Map(targetElement, huk.mapCommon.options),
				'marker': [], // marker werden erst spaeter erzeugt
				'result': result
			};
			return obj;
		},
		setMarker: function (map, position, icon, title) {
			return new google.maps.Marker({
				position: position,
				map: map,
				title: title,
				icon: icon,
				draggable: false
			});
		},
		getMapContainerElement: function (mapBezeichner) {
			return $('[data-mapname="' + mapBezeichner + '"]');
		},
		validOwnStandort: function (result) {
			// keiner der zwei Werte darf '0' oder '-1' sein
			return !(result.standortPosy === '0' || result.standortPosy === '-1' || result.standortPosx === '0' || result.standortPosx === '-1');
		},
		isValidMap: function (mapBezeichner) {
			// prueft ob der mapBezeichner im global map object vorhanden ist
			return huk.mapCommon.objectHasKey(mapBezeichner, huk.mapCommon.maps);
		},
		objectHasKey: function (needle, haystack) {
			return needle in haystack;
		},
		getMapData: function (mapBezeichner) {
			return huk.mapCommon.maps[mapBezeichner];
		},
		getMapInstance: function (mapBezeichner) {
			return huk.mapCommon.maps[mapBezeichner].mapInstance;
		},
		setBounds: function (mapBezeichner, bounds) {
			huk.mapCommon.maps[mapBezeichner].bounds = bounds;
		},
		setMarkers: function (mapBezeichner, marker) {
			huk.mapCommon.maps[mapBezeichner].marker.push(marker);
		},
		getBounds: function (mapBezeichner) {
			return huk.mapCommon.maps[mapBezeichner].bounds;
		},
		fitToBounds: function (mapBezeichner, mapInstance) {
			mapInstance.fitBounds(huk.mapCommon.getBounds(mapBezeichner));
		},
		isModifieable: function (mapBezeichner) {
			return huk.mapCommon.maps[mapBezeichner].modifieable;
		},
		setModifieable: function (mapBezeichner) {
			huk.mapCommon.maps[mapBezeichner].modifieable = true;
		},
		unsetModifieable: function (mapBezeichner) {
			huk.mapCommon.maps[mapBezeichner].modifieable = false;
		},
		getMarkerTitle: function (vmObj) {
			var title = '', namensvorsatz = '', toReturn = '';
			if(vmObj.isVm){
				if (vmObj.title) {
					title = vmObj.title + ' ';
				}
				if (vmObj.namensvorsatz) {
					namensvorsatz = vmObj.namensvorsatz + ' ';
				}
				toReturn = vmObj.anrede + ' ' + vmObj.type + ' ' + title + vmObj.vorname + ' ' + namensvorsatz + vmObj.name;
			} else if(vmObj.isGs){
				toReturn = 'Geschäftsstelle ' + vmObj.ort;
			}

			return toReturn;
		},
		reDrawMap: function (mapBezeichner) {
			var mapData = huk.mapCommon.getMapData(mapBezeichner);
			var mapDiv = mapData.mapInstance.getDiv();

			$('[data-mapcontainer="' + mapBezeichner + '"]').append(mapDiv);
			google.maps.event.trigger(mapData.mapInstance, 'resize');

			// scrollto active list item
			var activeMarker = huk.mapCommon.maps[mapBezeichner].activeMarker;
			if (!isNaN(parseInt(activeMarker, 10))) {
				huk.vmsucheCommon.showElementInMap(mapBezeichner, huk.mapCommon.maps[mapBezeichner].activeMarker);
			}
		},
		showOriginalkarte: function (mapBezeichner) {
			var mapObj = huk.mapCommon.getMapData(mapBezeichner);

			// nur fuer SAS MAP
			if ('infowindow' in mapObj) {
				mapObj.infowindow.close();
			}
			huk.mapCommon.originalkarteLink.hide(mapBezeichner);
			mapObj.mapInstance.fitBounds(mapObj.bounds);
			// bounds_changed wird direkt nochmal getriggert, wird hier unterbunden ->
			// dieser listener verhindert dass der link zur originalkarte sofort wieder angezeigt wird
			var listener = google.maps.event.addListener(mapObj.mapInstance, 'idle', function () {
				huk.mapCommon.setModifieable(mapBezeichner);
				google.maps.event.removeListener(listener);
			});
			huk.mapCommon.maps[mapBezeichner].activeMarker = null;
			$(window).trigger('map-resetted', [mapBezeichner]);
		},
		zoomToMarker: function (mapBezeichner, clickedIdx) {
			var currentMapObj = huk.mapCommon.getMapData(mapBezeichner),
				mapInstance = currentMapObj.mapInstance;

			mapInstance.panTo(currentMapObj.marker[clickedIdx].getPosition());
			mapInstance.setZoom(huk.mapCommon.zoomedIn);
		},
		originalkarteLink: {
			getLinkElement: function (mapBezeichner) {
				return $(huk.mapCommon.getMapData(mapBezeichner).containerElement).siblings('.link--originalkarte');
			},
			show: function (mapBezeichner) {
				huk.mapCommon.originalkarteLink.getLinkElement(mapBezeichner).show();
			},
			hide: function (mapBezeichner) {
				huk.mapCommon.originalkarteLink.getLinkElement(mapBezeichner).hide();
			}
		},
		clearMarkerFromMap: function (mapBezeichner) {
			// alte Marker von der Karte löschen und globales marker-array leeren
			if (huk.mapCommon.isValidMap(mapBezeichner)) {
				var markerLength = huk.mapCommon.maps[mapBezeichner].marker.length;
				for (var i = 0; i < markerLength; i++) {
					huk.mapCommon.maps[mapBezeichner].marker[i].setMap(null);
				}
			}
			huk.mapCommon.maps[mapBezeichner].marker.length = 0;
		},
		bindVmMarkerClick: function (mapBezeichner, idx, marker) {
			// nur fuer vm suche
			marker.addListener('click', function () {
				huk.mapCommon.getMapContainerElement(mapBezeichner)
					.find('[data-counter="' + idx + '"]').trigger('click');
			});
		},
		drawGs: function (mapBezeichner) {
			// GS einzeichnen (nicht zwingend im sichtbaren Teil der Karte), deshalb kein map.fitBounds
			var data = huk.mapCommon.getMapData(mapBezeichner),
				marker = huk.mapCommon.setMarker(
					data.mapInstance,
					new google.maps.LatLng(data.result.gs.posy, data.result.gs.posx),
					huk.mapCommon.iconPath + 'red_MarkerA.png',
					'Geschäftsstelle ' + data.result.gs.ort
				);
			// Marker einzeichen, dann in das object ablegen
			huk.mapCommon.setMarkers(mapBezeichner, marker);

			marker.addListener('click', function () {
				huk.mapCommon.getMapContainerElement(mapBezeichner).find('.gsTreffer').trigger('click');
			});
		},
		drawVms: function (mapBezeichner) {
			var data = huk.mapCommon.getMapData(mapBezeichner),
				vmResults = data.result.vm.length;

			for (var i = 0; i < vmResults; i++) {
				var currentVm = data.result.vm[i],
					position = new google.maps.LatLng(currentVm.posy, currentVm.posx),
					marker = huk.mapCommon.setMarker(
						data.mapInstance,
						position,
						huk.mapCommon.iconPath + 'red_Marker' + huk.vmsucheCommon.getMarkerLabelChar(i) + '.png',
						huk.mapCommon.getMarkerTitle(currentVm)
					);
				huk.mapCommon.bindVmMarkerClick(mapBezeichner, currentVm.counter, marker);
				huk.mapCommon.setMarkers(mapBezeichner, marker);
				data.bounds.extend(position);
			}
			// Bounds in das globale objekt speichern und Karte neu zentrieren
			huk.mapCommon.setBounds(mapBezeichner, data.bounds);
			huk.mapCommon.fitToBounds(mapBezeichner, data.mapInstance);
		},
		routeLinks: {
			show: function (mapBezeichner) {
				// Route war ausgeblendet, wenn vorher ein ungültiger Standort eingegeben wurde
				huk.mapCommon.getMapContainerElement(mapBezeichner).find('.link--route').show();
			},
			hide: function (mapBezeichner) {
				// eigener Standort ungültig --> Links zur Route ausblenden
				huk.mapCommon.getMapContainerElement(mapBezeichner).find('.link--route').hide();
			}
		},
		renderMap: function (mapBezeichner) {
			var data = huk.mapCommon.getMapData(mapBezeichner);

			// loader ausblenden
			huk.vmsucheCommon.hideAjaxLoader(mapBezeichner);

			// vorhandene marker loeschen
			huk.mapCommon.clearMarkerFromMap(mapBezeichner);

			// hier wird unterschieden welche karte gerendert wird
			// Marker einzeichnen, falls es den jeweiligen Eintrag im result gibt
			// GS / SAS/ VM
			// Reihenfolge ist WICHTIG!
			if (huk.mapCommon.objectHasKey('gs', data.result)) {
				huk.mapCommon.drawGs(mapBezeichner);
			}
			if (huk.mapCommon.objectHasKey('sas', data.result)) {
				huk.mapSas.renderMap(mapBezeichner);
			}
			if (huk.mapCommon.objectHasKey('vm', data.result)) {
				huk.mapCommon.drawVms(mapBezeichner);
				if (huk.mapCommon.validOwnStandort(data.result)) {
					// draw own standort
					huk.mapCommon.drawOwnPosition(mapBezeichner);
				} else {
					// eigener Standort ungültig --> Links zur Route ausblenden
					huk.mapCommon.routeLinks.hide(mapBezeichner);
				}
				// Karte neu zentrieren, unabhaengig von gs
				data.mapInstance.fitBounds(huk.mapCommon.getBounds(mapBezeichner));
			}

			// all sas/gs map
			if (data.result.anfrage.type === 'allgs' || data.result.anfrage.type === 'allsas') {
				huk.mapSasKomponente.drawMap(mapBezeichner);
			}

			google.maps.event.addListenerOnce(huk.mapCommon.getMapInstance(mapBezeichner), 'idle', function () {
				// do only first time when map was loaded
				huk.mapCommon.bindMapChange(mapBezeichner);
			});
		},
		bindMapChange: function (mapBezeichner) {
			// bind common map events
			huk.mapCommon.getMapInstance(mapBezeichner).addListener('bounds_changed', function () {
				if (huk.mapCommon.isModifieable(mapBezeichner)) {
					huk.mapCommon.originalkarteLink.show(mapBezeichner);
					huk.mapCommon.unsetModifieable(mapBezeichner);
				}
			});
		},
		drawOwnPosition: function (mapBezeichner) {
			// aktuellen Standort einzeichnen

			var data = huk.mapCommon.getMapData(mapBezeichner),
				eigenerStandort = new google.maps.LatLng(data.result.standortPosy, data.result.standortPosx),
				customIcon = {
					url: huk.mapCommon.iconPath + 'arrow.png',
					size: new google.maps.Size(39, 34),
					origin: new google.maps.Point(0, 0),
					anchor: new google.maps.Point(11, 34)
				},
				marker = huk.mapCommon.setMarker(
					data.mapInstance,
					eigenerStandort,
					customIcon,
					'Ihr Standort'
				);
			huk.mapCommon.setMarkers(mapBezeichner, marker);
			data.bounds.extend(eigenerStandort);
			huk.mapCommon.routeLinks.show(mapBezeichner);
		}
	}
});
huk.mapCommon.init();

var huk;
if (!huk) {
	huk = {};
}
$.extend(huk, {
	// SAS-Karte IM Navigator
	mapSas: {
		renderMap: function (mapBezeichner) {
			var data = huk.mapCommon.getMapData(mapBezeichner);

			// vorhandene marker loeschen
			huk.mapCommon.clearMarkerFromMap(mapBezeichner);
			google.maps.event.trigger(data.mapInstance, 'resize');

			// SAS einzeichnen
			var position = new google.maps.LatLng(data.result.sas.posy, data.result.sas.posx);
			var marker = huk.mapCommon.setMarker(
				data.mapInstance,
				position,
				huk.mapCommon.iconPath + 'yellow_MarkerA.png',
				'Schadenaußenstelle ' + data.result.sas.ort
			);
			huk.mapCommon.setMarkers(mapBezeichner, marker);
			data.mapInstance.setCenter(position);
			data.mapInstance.setZoom(huk.mapCommon.zoomedIn);
			data.bounds.extend(position);
			huk.mapCommon.setBounds(mapBezeichner, data.bounds);
		}
	}
});

var huk;
if (!huk) {
	huk = {};
}
$.extend(huk, {
	// SAS-Karte als Komponente
	mapSasKomponente: {
		bezeichner: 'sas-komp',
		element: 'gs-sas-map',
		types: {
			gs: 'allgs',
			sas: 'allsas'
		},
		uiSettings: {
			mapWidth: 0,
			mapRatio: 500 / 600,
			// todo: use SVG
			iconSmall: '/etc/designs/hukde/img/googlemaps/custom-smallmarker.png',
			icon: '/etc/designs/hukde/img/googlemaps/custom-marker.png'
		},
		init: function () {
			$(window).on('gmaps-loaded', function () {
				huk.mapSasKomponente.initMap();
			});
		},
		initMap: function () {
			$('.' + huk.mapSasKomponente.element).each(function () {
				var type = $(this).data('mapdata');
				// gleich die Ergebnisse holen, die Karte wird erst im Erfolgsfall initialisiert
				if (type.length > 0) {
					huk.mapSasKomponente.getData(type, huk.mapSasKomponente.bezeichner);
				}
			});
		},
		getData: function (type, mapBezeichner) {
			var containerElement = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner);
			$.ajax({
				url: huk.vmsucheCommon.settings.kontaktServletUrl,
				dataType: huk.vmsucheCommon.settings.jsonType,
				method: 'POST',
				data: {
					'type': 'all' + type
				}
			}).done(function (result) {
				// initialize new map
				huk.mapCommon.initNewMap(
					mapBezeichner,
					containerElement.find('.mapcontainer')[0],
					result
				);

			}).fail(function () {
				// todo: use global fail function
				// huk.vmsucheCommon.hideAjaxLoader(huk.mapSasKomponente.bezeichner);
				// $(domElement).hide();
				// $(domElement).siblings('.form__error').show();
			});
		},
		setMapHoehe: function (mapInstance) {
			// passt die Hoehe der Karte der aktuellen Breite an, so dass das Seitenverhältnis bei 500:600 bleibt
			var mapEl = $('.' + huk.mapSasKomponente.element),
				aktuelleBreite = mapEl.width();

			if (aktuelleBreite !== huk.mapSasKomponente.uiSettings.mapWidth) {
				mapEl.height(aktuelleBreite / huk.mapSasKomponente.uiSettings.mapRatio);
				huk.mapSasKomponente.uiSettings.mapWidth = aktuelleBreite;
				google.maps.event.trigger(mapInstance, 'resize');
			}
		},
		getIconByZoomLevel: function (mapInstance) {
			// Je nach Zoomstufe unterschiedliche Marker verwenden
			var icon = huk.mapSasKomponente.uiSettings.iconSmall;
			if (mapInstance.getZoom() > 7) {
				icon = huk.mapSasKomponente.uiSettings.icon;
			}
			return icon;
		},
		zoomToMarker: function (infowindow, marker, mapInstance) {
			infowindow.open(mapInstance, marker);
			mapInstance.setZoom(huk.mapCommon.zoomedIn);
			mapInstance.panTo(marker.getPosition());
		},
		getMarkerTitle: function (type, standort) {
			var markerTitle = '';
			if (type === huk.mapSasKomponente.types.gs) {
				markerTitle += 'Geschäftsstelle';
			} else {
				markerTitle += 'Schadenaußenstelle';
			}
			return markerTitle + ' ' + standort.ort;
		},
		getInfowindowContent: function (standort, type) {
			var headline = huk.mapSasKomponente.getMarkerTitle(type, standort),
				link = '';

			// todo: move to backend?
			if (type === huk.mapSasKomponente.types.gs) {
				link = '<p><a href="' + standort.hp + '/gs-mehr-info.html">Zur Homepage</a></p>';
			}
			//@formatter:off
			var info = '<div class="gm-infowindow">';
				info += '<h3>' + headline + '</h3>';
				info += '<p>' + standort.strasse + '<br>' + standort.plz + ' ' + standort.ort + '</p>';
				info += '<p>Tel: <a href="tel:' + standort.tel.replace(/\s/g, '') + '" class="link link--tel">' + standort.tel + '</a> *</p>';
				info += '<p>' + link + '</p>';
				info += '<p class="footnote footnote--narrow">';
				info += '	<sup class="footnote__icon">*</sup>';
				info += '	<span class="footnote__text">Kostenlos aus deutschen Telefonnetzen, rund um die Uhr</span>';
				info += '</p>';
				info += '</div>';
			//@formatter:on
			return info;
		},
		bindClick: function (infowindow, marker, mapInstance, content) {
			marker.addListener('click', function () {
				infowindow.setContent(content);
				huk.mapSasKomponente.zoomToMarker(infowindow, marker, mapInstance);
			});
		},
		drawMap: function (mapBezeichner) {
			var data = huk.mapCommon.getMapData(mapBezeichner),
				type = data.result.anfrage.type,
				infowindow = new google.maps.InfoWindow({}),
				mapInstance = data.mapInstance;

			// passende Höhe setzen
			huk.mapSasKomponente.setMapHoehe(data.mapInstance);

			// infowindow speichern (push to array)
			huk.mapCommon.maps[mapBezeichner].infowindow = infowindow;

			// GS bzw. SAS einzeichnen
			var resultsLength = data.result.daten.length;
			for (var i = 0; i < resultsLength; i++) {
				var standort = data.result.daten[i],
					position = new google.maps.LatLng(standort.posy, standort.posx),

					marker = huk.mapCommon.setMarker(
						mapInstance,
						position,
						huk.mapSasKomponente.uiSettings.icon,
						huk.mapSasKomponente.getMarkerTitle(type, standort)
					);
				// Marker einzeichen, dann in das object ablegen
				huk.mapCommon.setMarkers(mapBezeichner, marker);
				data.bounds.extend(position);

				huk.mapSasKomponente.bindClick(
					infowindow,
					marker,
					mapInstance,
					huk.mapSasKomponente.getInfowindowContent(standort, type)
				);

			}

			mapInstance.addListener('zoom_changed', function () {
				var icon = huk.mapSasKomponente.getIconByZoomLevel(mapInstance),
					markersLength = huk.mapCommon.maps[mapBezeichner].marker.length;
				for (var i = 0; i < markersLength; i++) {
					huk.mapCommon.maps[mapBezeichner].marker[i].setIcon(icon);
				}
			});

			// Höhe der Karte anpassen bei Resize
			$(window).on('resize', function () {
				huk.mapSasKomponente.setMapHoehe(data.mapInstance);
			});


			huk.mapCommon.setBounds(mapBezeichner, data.bounds);
			mapInstance.setZoom(huk.mapCommon.zoomedIn);
			// Karte neu zentrieren
			huk.mapCommon.fitToBounds(mapBezeichner, mapInstance);
			// Karte neu zentrieren und die richtigen Marker setzen
			google.maps.event.trigger(mapInstance, 'zoom_changed');
		}
	}
});
huk.mapSasKomponente.init();

var huk;
if (!huk) {
	huk = {};
}
$.extend(huk, {
	// VMGS-Karte als Komponente
	mapVmgsKomponente: {
		bezeichner: 'Vmgs-komp',
		element: 'kartenEinbindung__gmap',
		uiSettings: {
			mapWidth: 0,
			mapRatio: 500 / 600
		},
		init: function () {
			$(window).on('gmaps-loaded', function () {
				if (huk.mapVmgsKomponente.element.length > 0) {
					huk.mapVmgsKomponente.prepareMap();
				}
			});
		},
		prepareMap: function () {
			$('.' + huk.mapVmgsKomponente.element).each(function () {
				// initialize new map, create new map storage object and save new created object to global maps storage
				$.extend(
					huk.mapCommon.maps,
					huk.mapCommon.getNewMapStorage(huk.mapVmgsKomponente.bezeichner, $(this)[0], {
						lat: $(this).data('lat'),
						lng: $(this).data('lng')
					})
				);
				huk.mapVmgsKomponente.renderMap(huk.mapVmgsKomponente.bezeichner);
			});
		},
		renderMap: function (mapBezeichner) {
			var data = huk.mapCommon.getMapData(mapBezeichner);

			// vorhandene marker loeschen
			huk.mapCommon.clearMarkerFromMap(mapBezeichner);
			google.maps.event.trigger(data.mapInstance, 'resize');

			// SAS einzeichnen
			var position = new google.maps.LatLng(data.result.lat, data.result.lng);
			var marker = huk.mapCommon.setMarker(
				data.mapInstance,
				position
				// huk.mapCommon.iconPath + 'yellow_MarkerA.png',
				// 'Schadenaußenstelle '
			);
			huk.mapCommon.setMarkers(mapBezeichner, marker);
			data.mapInstance.setCenter(position);
			data.mapInstance.setZoom(huk.mapCommon.zoomedIn);
			data.bounds.extend(position);
			huk.mapCommon.setBounds(mapBezeichner, data.bounds);
		}
	}
});
huk.mapVmgsKomponente.init();

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	vmsucheCommon: {
		animationDuration: 400,
		isRunning: false,
		isRunningTimeout: 1000,
		error: {
			textDefault: 'Es ist ein Fehler aufgetreten. Bitte probieren Sie es erneut oder zu einem späteren Zeitpunkt.',
			textNoPlz: 'Bitte geben Sie die Postleitzahl oder den Ort an.'
		},
		settings: {
			kontaktServletUrl: '/KontaktServlet',
			plzortServletUrl: '/PlzOrtServlet',
			jsonType: 'json'
		},
		templateSas: document.getElementById('tmpl-sasresult'),
		getAjaxConfigObj: function (data) {
			return {
				url: huk.vmsucheCommon.settings.kontaktServletUrl,
				dataType: huk.vmsucheCommon.settings.jsonType,
				method: 'POST',
				data: data
			};
		},
		resetVmResultlist: function (mapBezeichner) {
			var container = huk.mapCommon.getMapContainerElement(mapBezeichner);
			container.find('.navigator__result-list-item').removeClass('navigator__result-list-item--active');
			container.find('.gsTreffer').removeClass('gsTreffer--active');
			huk.vmsucheCommon.scrollResultlist(mapBezeichner, 1);
		},
		doAjaxRequest: function (configObj, mapBezeichner) {
			var req = $.ajax(huk.vmsucheCommon.getAjaxConfigObj(configObj.request));
			huk.vmsucheCommon.isRunning = true;
			req.done(function (data) {
				huk.vmsucheCommon.hideAjaxLoader(mapBezeichner);
				if (data.success) {
					$(window).trigger(('data-loaded-' + mapBezeichner), [data]);
				} else {
					$(window).trigger(('data-loaded-error-' + mapBezeichner), [data]);
					huk.vmsucheCommon.showError(mapBezeichner, data);
				}
				huk.vmsucheCommon.isRunning = false;
			});
			req.fail(function (data) {
				$(window).trigger(('data-loaded-error-' + mapBezeichner), [data]);
				huk.vmsucheCommon.showError(mapBezeichner, data);
				huk.vmsucheCommon.isRunning = false;
			});
		},
		hideAjaxLoader: function (mapBezeichner) {
			var element = huk.mapCommon.getMapContainerElement(mapBezeichner);
			if (element.length > 0) {
				element.find('.map-ajaxloader').hide();
			}
		},
		showError: function (mapBezeichner, data) {
			var containerElement = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner);
			if (typeof data === 'undefined') {
				data = {};
				data.msg = huk.vmsucheCommon.error.textNoPlz;
			}

			// Bloecke ein- und ausblenden
			containerElement.find('.standortsuche_such-block').show().find('.input_plz_ort');
			containerElement.find('.standortsuche_ergebnis-block').hide();

			// red colorize form
			containerElement.find('.form__row').addClass('form__row--error');
			containerElement.find('.form__error').html(data.msg);
			if (data.vorschlaege) {
				// Wenn mehrere Treffer gefunden wurden, zeige die Vorschläge an
				huk.vmsucheCommon.showSuggestions(mapBezeichner, data.vorschlaege);
			}
		},
		getVorschlagLinkHtml: function (text) {
			return '<a href="#" class="link link--standalone ' + huk.navigatorBeraterSuche.plzVorschlagClass + '">' + text + '</a>';
		},
		showSuggestions: function (mapBezeichner, vorschlaege) {
			var containerElement = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner),
				vorschlaegeCount = vorschlaege.length,
				vorschlaegeHtml = '';

			for (var counter = 0; counter < vorschlaegeCount; counter++) {
				vorschlaegeHtml += huk.vmsucheCommon.getVorschlagLinkHtml(vorschlaege[counter].plzort);
			}
			containerElement.find('.navigator__plzort-vorschlaege').html(vorschlaegeHtml).show();

			// Bloecke ein- und ausblenden
			containerElement.find('.standortsuche_such-block').show().find('.input_plz_ort');
			containerElement.find('.standortsuche_ergebnis-block').hide();

			// Todo: im Hintergrund 1 Sek. warten damit keine PlzOrt-Langläufer angezeigt werden (besser wäre abort)
			setTimeout(function () {
				huk.vmsucheCommon.isRunning = false;
			}, huk.vmsucheCommon.isRunningTimeout);
		},
		hideErrors: function (mapBezeichner) {
			var containerElement = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner);
			containerElement.find('.form__row--error').removeClass('form__row--error');
			containerElement.find('.form__row--visible').removeClass('form__row--visible');
		},
		getMarkerLabelChar: function (offset) {
			// grosses A grosses Z (65-90)
			var curChar = 65 + offset;
			return (curChar > 90) ? 'Bullet' : String.fromCharCode(curChar);
		},
		highlight: function (mapBezeichner, element, isVm) {
			var containerElement = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner);
			containerElement.find('.gsTreffer').removeClass('gsTreffer--active');
			containerElement.find('.navigator__result-list-item').removeClass('navigator__result-list-item--active');
			if (isVm) {
				element.addClass('navigator__result-list-item--active');
			} else {
				element.addClass('gsTreffer--active');
			}
		},
		scrollResultlist: function (mapBezeichner, idx) {
			// zugehöriges Suchergebnis in den sichtbaren Bereich scrollen (nicht bei smartphones)
			if (huk.viewport.breakpoint !== 'S') {
				var containerElement = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner);
				containerElement.find('.navigator__result').parent().animate({
					scrollTop: huk.vmsucheCommon.getVmListElement(mapBezeichner, idx).position().top
				}, (huk.vmsucheCommon.animationDuration * 1.5));
			}
		},
		getVmListElement: function (mapBezeichner, idx) {
			return huk.mapCommon.getMapContainerElement(mapBezeichner).find('[data-counter="' + idx + '"]');
		},
		getElementFromMapBezeichner: function (mapBezeichner) {
			return $('[data-mapname="' + mapBezeichner + '"]:visible');
		},
		getMapBezeichnerFromDomElement: function (contextElement) {
			return contextElement.closest('[data-mapname]').data('mapname');
		},
		getMapBezeichnerFromEvent: function (event) {
			return event.type.replace('data-loaded-', '');
		},
		showElementInMap: function (mapBezeichner, idx) {
			var element = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner).find('[data-counter="'+idx+'"]');
			huk.mapCommon.maps[mapBezeichner].activeMarker = idx;
			huk.mapCommon.zoomToMarker(mapBezeichner, idx);
			huk.vmsucheCommon.scrollResultlist(mapBezeichner, idx);
			huk.vmsucheCommon.highlight(mapBezeichner, element, true);
		}
	}
});

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	navigatorSasSuche: {
		bezeichner: 'sas-navigator',
		form: $('.frm-sas-suche'),
		init: function () {
			huk.navigatorSasSuche.form.on('submit', function (e) {
				e.preventDefault();
				huk.navigatorSasSuche.getData();
			});
			// result von normaler suche loaded
			var mapBezeichner = huk.navigatorSasSuche.bezeichner;
			$(window).on(('data-loaded-'+mapBezeichner), function (e, data) {
				huk.navigatorSasSuche.prepareMap(mapBezeichner, data);
			});
		},
		getData: function () {
			var mapBezeichner = huk.navigatorSasSuche.bezeichner,
				plzortInputVal = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner).find('[name=sas_suche_plzort]').val();

			// alte Fehlermeldungen und Autocomplete verstecken
			huk.vmsucheCommon.hideErrors(mapBezeichner);
			huk.plzOrtAutocomplete.hide();

			if (plzortInputVal) {
				huk.vmsucheCommon.doAjaxRequest({
					request: {
						'type': 'sas',
						'plzort': plzortInputVal
					}
				}, mapBezeichner);
			} else {
				// Keine Eingabe -> Fehler anzeigen
				huk.vmsucheCommon.showError(mapBezeichner);
			}
		},
		prepareMap: function (mapBezeichner, data) {
			var containerElement = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner);
			var ergebnisBlock = $(containerElement).find('.schaden_ergebnis-block');
			var sasSuchergebnis = tim(huk.vmsucheCommon.templateSas.innerHTML, data.sas);

			// eingegebenen Standort eintragen
			$(containerElement).find('.schaden_ergebnis-standort').text(data.plzort);
			// Gefundene SAS eintragen
			$(containerElement).find('.sasTreffer').html(sasSuchergebnis);
			// Ergebnisblock einblenden
			ergebnisBlock.stop().slideDown(huk.vmsucheCommon.animationDuration, function () {
				huk.navigator.flyoutWrapper.animate({
					scrollTop: ergebnisBlock.height() - 100
				}, huk.vmsucheCommon.animationDuration);
				// karte erzeugen
				huk.mapCommon.initNewMap(
					mapBezeichner,
					containerElement.find('.mapcontainer')[0],
					data
				);
			});
		}
	}
});
$(huk.navigatorSasSuche.init);

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	navigatorBeraterSuche: {
		bezeichner: 'vmsuche-navigator',
		bezeichnerDetail: 'vmsuche-navigator-detail',
		context: $('.navigator'),
		submittedForm: null,
		plzVorschlagClass: 'plzort_vorschlag',
		data: {},
		init: function () {
			huk.navigatorBeraterSuche.bindEvents();
		},
		bindEvents: function () {
			// result von normaler suche loaded
			$(window).on(('data-loaded-' + huk.navigatorBeraterSuche.bezeichner), function (e, data) {
				var mapBezeichner = huk.vmsucheCommon.getMapBezeichnerFromEvent(e);
				huk.navigatorBeraterSuche.renderResultList(mapBezeichner, data);
			});
			// result von detailsuche loaded
			$(window).on(('data-loaded-' + huk.navigatorBeraterSuche.bezeichnerDetail), function (e, data) {
				var mapBezeichner = huk.vmsucheCommon.getMapBezeichnerFromEvent(e);
				huk.navigatorBeraterSuche.renderResultList(mapBezeichner, data);
			});

			// click on suggested PLZ ORT
			$(document).on('click', ('.'+huk.navigatorBeraterSuche.plzVorschlagClass), function (e) {
				e.preventDefault();
				var mapBezeichner = huk.vmsucheCommon.getMapBezeichnerFromDomElement($(this));
				huk.navigatorBeraterSuche.selectSuggestion(mapBezeichner, $(this));
			});

			// Klick auf Standort-Icon
			$(document).on('click', '.suche_mit_koordinaten', function (e) {
				e.preventDefault();
				$(this).siblings('.input_plz_ort').val('Aktueller Standort');
			});

			// normale suche
			$(document).on('submit', '.frm-standort-suche', function (e) {
				e.preventDefault();
				var mapBezeichner = huk.vmsucheCommon.getMapBezeichnerFromDomElement($(this));
				huk.navigatorBeraterSuche.getBeraterData(mapBezeichner);
			});
			// detailsuche
			var selectorNeuesuche = '.frm-standort-neuesuche';
			$(selectorNeuesuche).on('submit', function (e) {
				e.preventDefault();
				var mapBezeichner = huk.vmsucheCommon.getMapBezeichnerFromDomElement($(this));
				$(this).find('.standort-neuesuche-button').trigger('click');
				huk.navigatorBeraterSuche.getDetailFormData(mapBezeichner);
			});
			// Anliegen in detail form changed
			$(selectorNeuesuche).find('[name=issue2]').on('change', function (e) {
				e.preventDefault();
				$(this).closest('form').trigger('submit')
			});

			// click auf resultlistitem
			$(document).on('click', '.navigator__result-list-item, .gsTreffer', function () {
				var mapBezeichner = huk.vmsucheCommon.getMapBezeichnerFromDomElement($(this));
				huk.vmsucheCommon.showElementInMap(mapBezeichner, $(this).data('counter'));
			});
			// show original map
			$(document).on('click', '.link--originalkarte', function (e) {
				e.preventDefault();
				var mapBezeichner = huk.vmsucheCommon.getMapBezeichnerFromDomElement($(this));
				huk.mapCommon.showOriginalkarte(mapBezeichner);
			});
		},
		getBeraterDetailData: function (mapBezeichner, data) {
			// alte Fehlermeldungen und Autocomplete verstecken
			huk.vmsucheCommon.hideErrors(mapBezeichner);
			huk.plzOrtAutocomplete.hide();

			if (huk.navigatorBeraterSuche.isDetailFormValid(data)) {
				huk.vmsucheCommon.doAjaxRequest({
					request: data
				}, mapBezeichner);
			} else {
				// Keine Eingabe -> Fehler anzeigen
				huk.vmsucheCommon.showError(mapBezeichner);
			}
		},
		getBeraterData: function (mapBezeichner) {
			var plzortInputVal = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner).find('[name=search]').val();
			var issueVal = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner).find('[name=issue]').val();

			// alte Fehlermeldungen und Autocomplete verstecken
			huk.vmsucheCommon.hideErrors(mapBezeichner);
			huk.plzOrtAutocomplete.hide();

			if (plzortInputVal === 'Aktueller Standort') {
				// SONDERFALL: Suche mit aktuellem Standort des Kunden
				navigator.geolocation.getCurrentPosition(function(position) {
					huk.vmsucheCommon.doAjaxRequest({
						request: {
							'type': 'vm',
							'geox': position.coords.longitude,
							'geoy': position.coords.latitude,
							'issue': issueVal
						}
					}, mapBezeichner);
				},function(e) {
					huk.vmsucheCommon.showError(mapBezeichner, {
						'msg': 'Ihr Standort konnte nicht ermittelt werden. Möglicherweise haben Sie in der Vergangenheit widersprochen und diese Einstellung wurde im Browser gespeichert.'
					});
				});
			} else if (plzortInputVal) {
				// Suche mit Wert aus dem Eingabefeld
				huk.vmsucheCommon.doAjaxRequest({
					request: {
						'type': 'vm',
						'plzort': plzortInputVal,
						'issue': issueVal
					}
				}, mapBezeichner);
			} else {
				// Keine Eingabe -> Fehler anzeigen
				huk.vmsucheCommon.showError(mapBezeichner);
			}
		},
		getDetailFormData: function (mapBezeichner) {
			// alte Fehlermeldungen verstecken
			huk.vmsucheCommon.hideErrors(mapBezeichner);

			var formElement = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner);

			// Daten sammeln
			// @formatter:off
			var data = {
				plz: formElement.find('[name=plz]').val(),
				ort: formElement.find('[name=ort]').val(),
				strasse: formElement.find('[name=strasse]').val(),
				issue: formElement.find('[name=issue2]').val(),
				type: 'vm'
			};
			// @formatter:on

			huk.navigatorBeraterSuche.getBeraterDetailData(mapBezeichner, data);
		},
		fillDetailForm: function (mapBezeichner, result) {
			var containerElement = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner);
			// eingegebenen Werte eintragen
			containerElement.find('.vmsucheStandort').text(result.anfrage.plz + ' ' + result.anfrage.ort);
			containerElement.find('[name=plz]').val(result.anfrage.plz);
			containerElement.find('[name=ort]').val(result.anfrage.ort);
			containerElement.find('[name=strasse]').val(result.anfrage.strasse);
			containerElement.find('[name=issue2]').val(result.anfrage.issue);

			containerElement.show();
		},
		renderResultList: function (mapBezeichner, result) {

			// Gefundene VM und GS eintragen
			var templateVm = $('#tmpl-vmresult').html(),
				templateWunschVm = $('#tmpl-wunschvmresult').html(),
				vmSuchergebnis = '',
				vmCount = result.vm.length;

			for (var counter = 0; counter < vmCount;) {
				var currentResult = result.vm[counter];
				currentResult.markerlabel = huk.vmsucheCommon.getMarkerLabelChar(counter);
				currentResult.standortPosx = result.standortPosx;
				currentResult.standortPosy = result.standortPosy;
				currentResult.counter = counter;
				if (huk && huk.fs && huk.fs === '1') {
					// Bei freigeschalteten Kunden zeige die WunschVM-Variante der Beratersuche
					vmSuchergebnis += tim(templateWunschVm, currentResult);
				} else {
					// sonst die normale Beratersuche
					vmSuchergebnis += tim(templateVm, currentResult);
				}
				counter++;
			}

			// befuelle zweites Formular zum erneut suchen/verfeinern
			huk.navigatorBeraterSuche.fillDetailForm(mapBezeichner, result);

			// show elements
			var containerElement = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner);
			containerElement.find('.vmTreffer').html(vmSuchergebnis);
		//	containerElement.find('.gsTreffer').html(gsSuchergebnis);
			containerElement.find('.standortsuche_such-block').hide(); // todo: nur fuer komponente?
			containerElement.find('.navigator__result').scrollTop(0);// todo: nur fuer navigator?
			containerElement.find('.standortsuche_ergebnis-block').show();

			huk.vmsucheCommon.isRunning = false;

			huk.mapCommon.initNewMap(
				mapBezeichner,
				containerElement.find('[data-mapcontainer]')[0], // dom object nicht jquery! [0]
				result
			);

		},

		selectSuggestion: function (mapBezeichner, suggestionElement) {
			var containerElement = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner).find('.frm-standort-suche');
			containerElement.find('.input_plz_ort').val(suggestionElement.text());
			containerElement.trigger('submit');
		},
		isDetailFormValid: function (data) {
			// Mindestens PLZ oder Ort müssen vorhanden sein sonst Fehler anzeigen
			return !(data.plz === '' && data.ort === '');
		}
	}
});
$(huk.navigatorBeraterSuche.init);

var huk;
if (!huk) {
	huk = {};
}

$.extend(huk, {
	vmsucheKomponente: {
		bezeichner: 'vmsuche-komp',
		init: function () {
			var mapBezeichner = huk.vmsucheKomponente.bezeichner;
			// alte Fehlermeldungen und Autocomplete verstecken
			huk.vmsucheCommon.hideErrors(mapBezeichner);
			huk.plzOrtAutocomplete.hide();

			// todo: validation
			var params = new URL(document.location).searchParams;
			var plzOrtParams = params.get('plzort');
			var issueParams = params.get('issue');

			// ermöglicht den Redakteuren im AEM den Wert vorzubelegen
			if (!plzOrtParams) {
				plzOrtParams = $(".vmgs_suchergebnis").data('plzort');
			}
			if (plzOrtParams) {
				var data = {
					plzort: plzOrtParams
				};
				if(issueParams){
					data.issue = issueParams;
				}
				huk.vmsucheCommon.doAjaxRequest({
					request: data
				}, mapBezeichner);
			} else if (huk && huk.us && huk.us == 'KUN') {
				// Bei eingeloggten Kunden wird sofort eine Suche durchgeführt, die Adresse wird im Backend vorbelegt
				var data = {};
				if(issueParams){
					data.issue = issueParams;
				}
				huk.vmsucheCommon.doAjaxRequest({
					request: data
				}, mapBezeichner);
			} else {
				// show initial suche
				huk.vmsucheKomponente.showInitialSearch(mapBezeichner);
				if(issueParams){
					huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner).find('[name=issue]').val(issueParams);

				}
			}
			// bindevents
			$(window).on(('data-loaded-' + mapBezeichner), function (e, data) {
				huk.vmsucheKomponente.setSearchParam(mapBezeichner, data);
				huk.navigatorBeraterSuche.renderResultList(mapBezeichner, data);
			});
		},
		addParameterToURL: function (param) {
			var _url = location.href;
			_url += (_url.split('?')[1] ? '&' : '?') + param;
			history.pushState(null, null, _url);
			return _url;
		},
		changeUrlParam: function (param, value) {
			// todo:
		},
		setSearchParam: function (mapBezeichner, data) {
			var searchParam = huk.utils.getUrlParameter('plzort');
			if (typeof searchParam === 'undefined') {
				var param = 'plzort=' + data.anfrage.plz + ' ' + data.anfrage.ort;
				huk.vmsucheKomponente.addParameterToURL(param);
			}
		},
		showInitialSearch: function (mapBezeichner) {
			huk.vmsucheCommon.hideAjaxLoader(mapBezeichner);
			var containerElement = huk.vmsucheCommon.getElementFromMapBezeichner(mapBezeichner);
			containerElement.find('.standortsuche_such-block').show();
		},
		toggle_visibility: function (id) {
			var e = document.getElementById(id);
			e.style.display = ((e.style.display!='none') ? 'none' : 'block');
		}
	}
});

if (huk.vmsucheCommon.getElementFromMapBezeichner(huk.vmsucheKomponente.bezeichner).length) {
	$(huk.vmsucheKomponente.init);
}

//dtm tropiko
var huk;
if (!huk) {
    huk = {};
}
// noinspection JSAnnotator
$.extend(huk, {
    tracking: {
        isRechner: function () {
            if (huk.stickyHeader.isTropiko === undefined) { return false; }
            	else if ( (huk.stickyHeader.isTropiko != undefined && huk.stickyHeader.isTropiko == true) && huk.tracking.isFormular() == false) { return true; }
            return false;
        },
        isFormular: function () {
            if (huk.isFormular === undefined) {
                return false;
            } else return huk.isFormular ? true : false;
        },
        isCms: function () {
            if (huk.tracking.isRechner() == false && huk.tracking.isFormular() == false) { return true; }
            return false;
        },
        getPagePath: function() {
            var resPath;
            resPath = window.location.pathname;
            if ((resPath.indexOf('/tarifrechner/') !=-1) && ((resPath.indexOf('/vm/') !=-1) || (resPath.indexOf('/gs/') !=-1))) {
        	var pos = resPath.indexOf('tarifrechner');
        	resPath = resPath.slice(pos);
            }
            resPath = resPath.replace(/\//g, '.');
            if (resPath.indexOf('.')===0) {
                resPath = resPath.substring(1, resPath.length);
            }
            return resPath;
        },
        bindEvents: function () {
            // fill object on domready
            $(document).ready( function() {
                if (huk.tracking.isRechner() === true) {
                    //toDO Ablauf Tarifrechner
                    if (huk.tracking.fillHDEObj() === 'ok') {
                        huk.tracking.prepareTracking();
                    }
                } else {
                    // Ablauf alt CMS
                    huk.tracking.fillHDECmsObj();
                    if (huk.tracking.fillHDECmsObj() === 'ok') {
                        // huk.tracking.fireTracking(); per DTM!
                    }
                }
            });

            // load tracking scripts
            huk.tracking.loadScripts();

        },
        fillHDEObj: function() {
            window.hde = {
                session: {
                    srv: {
                        node: huk.tracking.getSrvNode()
                    },
                    version: '1.00',
                    id: '',
                    orig: 'huk',
                    cntxt: huk.tracking.getVmGsContext() //toDo check aus tropiko
                },
                page: {
                    pagepath : huk.tracking.getPagePath(),
                    ty : 'tarifrechner'
                },
                user: {
                    type: '',
                    act: '',
                    stat: huk.tracking.getUserStatTr()
                },
                layout: {
                    variant: huk.viewport.breakpoint,
                    orient: huk.viewport.orientation
                },
                campaign: {
                    externalid: huk.tracking.getKampagneExternal(),
                    internalid: huk.tracking.getKampagneInternal()
                },
                tr: {},
            };
            return 'ok';
        },
        //ALT CMS
        fillHDECmsObj: function() {
            window.hde = {
                session: {
                    srv: {
                        node: huk.tracking.getSrvNode()
                    },
                    version: '1.00',
                    id: '',
                    orig: 'huk',
                    cntxt: huk.tracking.getVmGsContext()
                },
                user: {
                    type: '', // Phase2 new|frq|cus
                    act: '',
                    stat: huk.tracking.getUserStat() // Phase3 TR!
                },
                page: {
                    id: '',
                    pagepath: huk.pagepath,
                    name: huk.pagename,
                    ty: huk.pagetype,
                    bc: ''
                },
                layout: {
                    variant: huk.viewport.breakpoint,
                    orient: huk.viewport.orientation
                },
                campaign: {
                    externalid: huk.tracking.getKampagneExternal(),
                    internalid: huk.tracking.getKampagneInternal()
                },
                form: {
                    name : huk.tracking.getFormularName()
                },
                tr: {},
            };
            return 'ok';
        },
        isIdent: function (){
            return $('#meinehuk').find('div').hasClass('meinehuk_loggedin');
        },
        getVmGsContext: function() {
            if (huk.vmgs === '' || huk.vmgs === 'STD'){
                return 'huk';
            }
            if (huk.vmgs !== undefined ) {
                return huk.vmgs.toLowerCase();
            } else {
                return '';
            }
        },
        // TODO ueberpruefen ob noch benoetigt
        getCookie: function(cname) {
            try {
                var name = cname + '=';
                var ca = document.cookie.split(';');
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) == ' ') {
                        c = c.substring(1);
                    }
                    if (c.indexOf(name) == 0) {
                        return c.substring(name.length, c.length);
                    }
                }
                return '';
            } catch (e) {
                return '';
            }
        },
        getUserStat: function (){
            if (huk.us !== null) {
                return huk.us;
            } else {
                if (huk.tracking.isIdent()) {
                    return 'auth';
                } else {
                    return 'guest';
                }
            }
        },
        getSrvNode: function() {
            var srv;
            srv = window.location.hostname;
            if (srv.indexOf('www.huk.de') != -1) {
                srv = 'p';
            } else if (srv.indexOf('de.') != -1) {
                srv = 's';
            } else {
                srv = 't';
            }
            return srv;
        },
        getKampagneExternal: function() {
			try {
				if (window.location.search.length > 5) {
					var idParam = getUrlParam('ID');
					var safeIdParam = [];
					if (idParam !== undefined) {
						var regex = new RegExp('([A-Z][0-9]{4,6}|[a-z][0-9]{4,6})', 'g');
						safeIdParam = idParam.match(regex);
					}
					return safeIdParam[0];
				} else {
					return '';
				}
			} catch (e) { return ''; }
		},
        getKampagneInternal: function() {
			try {
				if (window.location.search.length > 5) {
					var inidParam = getUrlParam('INID');
					var safeInidParam = [];
					if (inidParam !== undefined) {
						var regex = new RegExp('([A-Z][0-9]{4,6}|[a-z][0-9]{4,6})', 'g');
						safeInidParam = inidParam.match(regex);
					}
					return safeInidParam[0];
				} else {
					return '';
				}
			} catch (e) { return ''; }
        },
        getUserStatTr: function () {
            //return 'STD';
            return huk.us ? huk.us : 'STD';
        },
        getFormularName: function () {
            if (huk.tracking.isFormular() && window.location.search.length > 8) {
                var nameParam = getUrlParam('formname');
                if (nameParam !== undefined) {
                    return nameParam;
                } else return '';
            } else { return ''; }
            },
        fillZusatz: function() {
            // ZusatzFelder aufbereiten....ummappen
            window.hde.page.pagepath = huk.tracking.getPagePath();
            window.hde.page.ty = 'tarifrechner';
            if (window.hde.user.stat == undefined || window.hde.user.stat == '') {
                window.hde.user.stat = huk.tracking.getUserStatTr();
            }
            //Workaround Meilensteine rücksetzen
            if (document.getElementsByTagName('huk-step-message').length >= 1
                && document.getElementsByClassName('notrack').length >= 1) {
                window.hde.product.status = '';
                window.hde.product.action = '';
            }
            window.hde.user.act = '';
            window.hde.user.typ = '';
        },
        prepareTracking: function() {
            if (window.hde !== undefined) {
                try { // Zuweisung erst im TR richten
                    if (window.hde !== undefined && window.hde.tr !== undefined) {
                        Object.assign(window.hde, window.hde.tr); // MERGE!
                    }
                    huk.tracking.fillZusatz();
                    huk.tracking.fireTracking();
                } catch (e) {}
            }
        },
        isAllowed: function () {
            return (getCookie('donottrack') !== 'true');
        },
        fireTracking: function () {
            try { // Q1/2020 feldm TR Aenderung
                if (window.funnel && typeof window.funnel.action === 'function') {
                    window.funnel.action(); // DTM ist schon da – wie gewohnt feuern!
                } else { // DTM ist noch nicht da! Über events arbeiten.
                    window.hde = window.hde || {}
                    window.hde.event = window.hde.event || []
                    window.hde.event.push("funnel.action");
                }
            } catch (e) {}
        },
		loadScripts: function () {
			// Q2 2022 No checking storage element consents are required for launch

			function triggerSatellite(state) {
				if (state.consentAction) {
					try {
						var action = {
							"settings.consent-all": "settings-all",
							"settings.save": "save-settings",
							"home.consent-all": "accept-all",
						}[state.consentAction];

						window._satellite.track("Event", {
							eventAction: "cookiebanner",
							eventValue: {
								technical: state.consentSettings.technical,
								functional: state.consentSettings.functional,
								marketing: state.consentSettings.marketing,
								action: action,
							},
						});
					} catch (e) {}
				}
			}
					window.addEventListener('consentChanged', function(){
						if(window.registerCookieBannerCallback) {
							window.registerCookieBannerCallback(function(settings, userValue, action){
							if(userValue && action){
								triggerSatellite({consentSettings: settings, consentAction: action});
							}
							});
						};
					});
		} // end loadScripts
    }
});
$(huk.tracking.bindEvents);

// Hier Änderungen/Erweiterungen für Komponenten von PP

$(document).ready( function() {
    $('.flyout__teaser').on('click', function () {
        // Todo: trigger click on link instead
        window.location.href = $(this).find('a').attr('href');
    });
});

// Dynamische Parameter bei Extlinks
$(document).ready( function() {
    $('a[href*="/hukinfo/extlink"]').each(function () {
        var href = $(this).attr('href');
        href = href.replace('aachenervermnr', huk.aa);
        href = href.replace('pbvermnr', huk.pb);
        $(this).attr('href', href);
    });
});

// Whitespace in tel:-Links entfernen
$(document).ready( function() {
    $('a[href^="tel:"]').each(function () {
        var href = $(this).attr('href');
        href = href.replace(/\s/g, '');
        $(this).attr('href', href);
    });
});

// A/B-Test - Link zufällig auswählen
$(document).ready( function() {
    $('a[data-hrefabtest]').each(function () {
        if (Math.random() < 0.5) {
            // In 50% der Aufrufe wird der alternative Link verwendet
            var href2 = $(this).data('hrefabtest');
            $(this).attr('href', href2);
		}
    });
});


// Cookie Funktionen
function getCookie(cname) {
    var name = cname + '=',
        ca = document.cookie.split(';');

    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) === 0) {
            return c.substring(name.length, c.length);
        }
    }
    return '';
}

function setCookie(name,value,days) {
    var expires = "";
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days*24*60*60*1000));
        expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + (value || "")  + expires + "; path=/";
}

function eraseCookie(name) {
	document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
}

// alle Parameter
function getUrlParams() {
    var vars = [],
        hash,
        hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for (var i = 0; i < hashes.length; i++) {
        hash = hashes[i].split('=');
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars;
}

// bestimmter Parameter by Name
function getUrlParam(name) {
    return getUrlParams()[name];
}

// Enfernt einen Parameter aus der URL
// Beispiel: removeParameter('index.jsp?txt1=1&txt2=2', 'txt1') liefert index.jsp?txt2=2
function removeParameterFromUrl(url, key) {
    var url_teile = url.split('?');
    if (url_teile.length === 1) {
        return url;
    }

    var querystring = url_teile[1];
    var querystringArr = querystring.split('&');

    var querystring_neu = '';
    var first = true;

    for (var i = 0; i < querystringArr.length; i++) {
        var parameter = querystringArr[i].split('=');
        if (parameter[0] !== key) {
            if (!first) {
                querystring_neu += '&';
            }
            querystring_neu += querystringArr[i];
            first = false;
        }
    }

    if (querystring_neu === '') {
        return url_teile[0];
    } else {
        return url_teile[0] + '?' + querystring_neu;
    }
}

// Hängt einen Parameter und Wert an die URL an
function addParameterToUrl(url, key, value) {
    if (url.indexOf('?') === -1) {
        url += '?';
    } else {
        url += '&';
    }
    url += key + '=' + encodeURIComponent(value);
    return url;
}

// Wenn der Loginname im Navigator leer ist, nehme 'Meine HUK'
$(document).ready( function() {
	var $meineHukHeadline = $('.meineHukHeadline.loginname');
	if ($meineHukHeadline.text() === '') {
		$meineHukHeadline.text('Meine HUK');
	}

	var $meineHukSubtext = $('.navigator__button-subtext--loginname');
	if ($meineHukSubtext.html() === '') {
		// html() und &ouml; wegen Seiten vom WAS
		$meineHukSubtext.html("Pers&ouml;nlicher Bereich");
	}
});

// data-track binden für TR
$(document).on('mousedown', 'a.jsTrack', function (event) {
    if (typeof handleRPExitLink === 'function') {
        handleRPExitLink(this);
    }
});

